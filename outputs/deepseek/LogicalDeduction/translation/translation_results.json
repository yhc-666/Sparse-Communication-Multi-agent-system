[
    {
        "id": "logical_deduction_0",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a green book, a blue book, a white book, a purple book, and a yellow book. The blue book is to the right of the yellow book. The white book is to the left of the yellow book. The blue book is the second from the right. The purple book is the second from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The green book is the second from the left.",
            "B) The blue book is the second from the left.",
            "C) The white book is the second from the left.",
            "D) The purple book is the second from the left.",
            "E) The yellow book is the second from the left."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(blue,   True)              ::: The blue book.\nBook(white,  True)              ::: The white book.\nBook(purple, True)              ::: The purple book.\nBook(yellow, True)              ::: The yellow book.\nRightOf(blue, yellow, True)     ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow, True)     ::: The white book is to the left of the yellow book.\nSecondFromRight(blue, True)     ::: The blue book is the second from the right.\nSecondFromLeft(purple, True)    ::: The purple book is the second from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nQuery:\nSecondFromLeft(green,  True)    ::: Option A\nSecondFromLeft(blue,   True)    ::: Option B\nSecondFromLeft(white,  True)    ::: Option C\nSecondFromLeft(purple, True)    ::: Option D\nSecondFromLeft(yellow, True)    ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nSecondFromRight(x) ::: Book x is the second book from the right.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nPremises:\nBook(green) ::: The green book.\nBook(blue) ::: The blue book.\nBook(white) ::: The white book.\nBook(purple) ::: The purple book.\nBook(yellow) ::: The yellow book.\nRightOf(blue, yellow) ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow) ::: The white book is to the left of the yellow book.\nSecondFromRight(blue) ::: The blue book is the second from the right.\nSecondFromLeft(purple) ::: The purple book is the second from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\nConclusion:\nSecondFromLeft(green) ::: Option A\nSecondFromLeft(blue) ::: Option B\nSecondFromLeft(white) ::: Option C\nSecondFromLeft(purple) ::: Option D\nSecondFromLeft(yellow) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Green, Blue, White, Purple, Yellow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Blue) > pos(Yellow) ::: The blue book is to the right of the yellow book.\npos(White) < pos(Yellow) ::: The white book is to the left of the yellow book.\npos(Blue) == 4 ::: The blue book is the second from the right.\npos(Purple) == 2 ::: The purple book is the second from the left.\n# Options\nis_valid(pos(Green) == 2) ::: A) The green book is the second from the left.\nis_valid(pos(Blue) == 2) ::: B) The blue book is the second from the left.\nis_valid(pos(White) == 2) ::: C) The white book is the second from the left.\nis_valid(pos(Purple) == 2) ::: D) The purple book is the second from the left.\nis_valid(pos(Yellow) == 2) ::: E) The yellow book is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(blue,   True)              ::: The blue book.\nBook(white,  True)              ::: The white book.\nBook(purple, True)              ::: The purple book.\nBook(yellow, True)              ::: The yellow book.\nRightOf(blue, yellow, True)     ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow, True)     ::: The white book is to the left of the yellow book.\nSecondFromRight(blue, True)     ::: The blue book is the second from the right.\nSecondFromLeft(purple, True)    ::: The purple book is the second from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nQuery:\nSecondFromLeft(green,  True)    ::: Option A\nSecondFromLeft(blue,   True)    ::: Option B\nSecondFromLeft(white,  True)    ::: Option C\nSecondFromLeft(purple, True)    ::: Option D\nSecondFromLeft(yellow, True)    ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nSecondFromRight(x) ::: Book x is the second book from the right.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nPremises:\nBook(green) ::: The green book.\nBook(blue) ::: The blue book.\nBook(white) ::: The white book.\nBook(purple) ::: The purple book.\nBook(yellow) ::: The yellow book.\nRightOf(blue, yellow) ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow) ::: The white book is to the left of the yellow book.\nSecondFromRight(blue) ::: The blue book is the second from the right.\nSecondFromLeft(purple) ::: The purple book is the second from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\nConclusion:\nSecondFromLeft(green) ::: Option A\nSecondFromLeft(blue) ::: Option B\nSecondFromLeft(white) ::: Option C\nSecondFromLeft(purple) ::: Option D\nSecondFromLeft(yellow) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Green, Blue, White, Purple, Yellow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Blue) > pos(Yellow) ::: The blue book is to the right of the yellow book.\npos(White) < pos(Yellow) ::: The white book is to the left of the yellow book.\npos(Blue) == 4 ::: The blue book is the second from the right.\npos(Purple) == 2 ::: The purple book is the second from the left.\n# Options\nis_valid(pos(Green) == 2) ::: A) The green book is the second from the left.\nis_valid(pos(Blue) == 2) ::: B) The blue book is the second from the left.\nis_valid(pos(White) == 2) ::: C) The white book is the second from the left.\nis_valid(pos(Purple) == 2) ::: D) The purple book is the second from the left.\nis_valid(pos(Yellow) == 2) ::: E) The yellow book is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_1",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a convertible, a sedan, a tractor, a minivan, and a limousine. The tractor is newer than the minivan. The tractor is older than the limousine. The convertible is older than the sedan. The convertible is the second-newest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The convertible is the second-newest.",
            "B) The sedan is the second-newest.",
            "C) The tractor is the second-newest.",
            "D) The minivan is the second-newest.",
            "E) The limousine is the second-newest."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)               ::: Vehicle $x is older than vehicle $y.\nSecondNewest($x, bool)            ::: Vehicle $x is the second-newest vehicle.\nFacts:\nVehicle(convertible, True)        ::: The convertible.\nVehicle(sedan, True)              ::: The sedan.\nVehicle(tractor, True)            ::: The tractor.\nVehicle(minivan, True)           ::: The minivan.\nVehicle(limousine, True)          ::: The limousine.\nNewer(tractor, minivan, True)     ::: The tractor is newer than the minivan.\nNewer(limousine, tractor, True)   ::: The limousine is newer than the tractor.\nOlder(convertible, sedan, True)   ::: The convertible is older than the sedan.\nSecondNewest(convertible, True)   ::: The convertible is the second-newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nQuery:\nSecondNewest(convertible, True)  ::: Option A\nSecondNewest(sedan, True)        ::: Option B\nSecondNewest(tractor, True)      ::: Option C\nSecondNewest(minivan, True)      ::: Option D\nSecondNewest(limousine, True)    ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nSecondNewest(x) ::: Vehicle x is the second-newest vehicle.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(minivan) ::: The minivan.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, minivan) ::: The tractor is newer than the minivan.\nNewer(limousine, tractor) ::: The limousine is newer than the tractor.\nOlder(convertible, sedan) ::: The convertible is older than the sedan.\nSecondNewest(convertible) ::: The convertible is the second-newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\nConclusion:\nSecondNewest(convertible) ::: Option A\nSecondNewest(sedan) ::: Option B\nSecondNewest(tractor) ::: Option C\nSecondNewest(minivan) ::: Option D\nSecondNewest(limousine) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, Tractor, Minivan, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOlder = Function([Vehicle, Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: If x is newer than y, then y is older than x\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: If x is older than y, then y is newer than x\nNewer(Tractor, Minivan) ::: The tractor is newer than the minivan\nNewer(Limousine, Tractor) ::: The limousine is newer than the tractor\nOlder(Convertible, Sedan) ::: The convertible is older than the sedan\nSecondNewest(Convertible) ::: The convertible is the second-newest\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive\n# Options\nis_valid(SecondNewest(Convertible)) ::: A) The convertible is the second-newest\nis_valid(SecondNewest(Sedan)) ::: B) The sedan is the second-newest\nis_valid(SecondNewest(Tractor)) ::: C) The tractor is the second-newest\nis_valid(SecondNewest(Minivan)) ::: D) The minivan is the second-newest\nis_valid(SecondNewest(Limousine)) ::: E) The limousine is the second-newest"
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)               ::: Vehicle $x is older than vehicle $y.\nSecondNewest($x, bool)            ::: Vehicle $x is the second-newest vehicle.\nFacts:\nVehicle(convertible, True)        ::: The convertible.\nVehicle(sedan, True)              ::: The sedan.\nVehicle(tractor, True)            ::: The tractor.\nVehicle(minivan, True)           ::: The minivan.\nVehicle(limousine, True)          ::: The limousine.\nNewer(tractor, minivan, True)     ::: The tractor is newer than the minivan.\nNewer(limousine, tractor, True)   ::: The limousine is newer than the tractor.\nOlder(convertible, sedan, True)   ::: The convertible is older than the sedan.\nSecondNewest(convertible, True)   ::: The convertible is the second-newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nQuery:\nSecondNewest(convertible, True)  ::: Option A\nSecondNewest(sedan, True)        ::: Option B\nSecondNewest(tractor, True)      ::: Option C\nSecondNewest(minivan, True)      ::: Option D\nSecondNewest(limousine, True)    ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nSecondNewest(x) ::: Vehicle x is the second-newest vehicle.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(minivan) ::: The minivan.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, minivan) ::: The tractor is newer than the minivan.\nNewer(limousine, tractor) ::: The limousine is newer than the tractor.\nOlder(convertible, sedan) ::: The convertible is older than the sedan.\nSecondNewest(convertible) ::: The convertible is the second-newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\nConclusion:\nSecondNewest(convertible) ::: Option A\nSecondNewest(sedan) ::: Option B\nSecondNewest(tractor) ::: Option C\nSecondNewest(minivan) ::: Option D\nSecondNewest(limousine) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, Tractor, Minivan, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOlder = Function([Vehicle, Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: If x is newer than y, then y is older than x\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: If x is older than y, then y is newer than x\nNewer(Tractor, Minivan) ::: The tractor is newer than the minivan\nNewer(Limousine, Tractor) ::: The limousine is newer than the tractor\nOlder(Convertible, Sedan) ::: The convertible is older than the sedan\nSecondNewest(Convertible) ::: The convertible is the second-newest\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive\n# Options\nis_valid(SecondNewest(Convertible)) ::: A) The convertible is the second-newest\nis_valid(SecondNewest(Sedan)) ::: B) The sedan is the second-newest\nis_valid(SecondNewest(Tractor)) ::: C) The tractor is the second-newest\nis_valid(SecondNewest(Minivan)) ::: D) The minivan is the second-newest\nis_valid(SecondNewest(Limousine)) ::: E) The limousine is the second-newest"
            }
        ]
    },
    {
        "id": "logical_deduction_2",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a station wagon, a sedan, a tractor, a motorcyle, and a limousine. The tractor is newer than the motorcyle. The motorcyle is newer than the sedan. The limousine is the oldest. The station wagon is the newest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The station wagon is the oldest.",
            "B) The sedan is the oldest.",
            "C) The tractor is the oldest.",
            "D) The motorcyle is the oldest.",
            "E) The limousine is the oldest."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest among the five vehicles.\nNewest($x, bool)                   ::: Vehicle $x is the newest among the five vehicles.\nFacts:\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(sedan,        True)       ::: The sedan.\nVehicle(tractor,      True)       ::: The tractor.\nVehicle(motorcyle,    True)       ::: The motorcyle.\nVehicle(limousine,    True)       ::: The limousine.\nNewer(tractor, motorcyle, True)   ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan, True)     ::: The motorcyle is newer than the sedan.\nOldest(limousine, True)           ::: The limousine is the oldest.\nNewest(station_wagon, True)       ::: The station wagon is the newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nOldest($x, True) >>> Older($x, station_wagon, True) && Older($x, sedan, True) && Older($x, tractor, True) && Older($x, motorcyle, True) ::: The oldest vehicle is older than all other vehicles.\nNewest($x, True) >>> Newer($x, sedan, True) && Newer($x, tractor, True) && Newer($x, motorcyle, True) && Newer($x, limousine, True) ::: The newest vehicle is newer than all other vehicles.\nQuery:\nOldest(station_wagon, True)       ::: Option A\nOldest(sedan,        True)       ::: Option B\nOldest(tractor,      True)       ::: Option C\nOldest(motorcyle,    True)       ::: Option D\nOldest(limousine,    True)       ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOldest(x) ::: Vehicle x is the oldest among the five vehicles.\nNewest(x) ::: Vehicle x is the newest among the five vehicles.\nPremises:\nVehicle(station_wagon) ::: The station wagon.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(motorcyle) ::: The motorcyle.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, motorcyle) ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan) ::: The motorcyle is newer than the sedan.\nOldest(limousine) ::: The limousine is the oldest.\nNewest(station_wagon) ::: The station wagon is the newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\n\u2200x (Oldest(x) \u2192 (Older(x, station_wagon) \u2227 Older(x, sedan) \u2227 Older(x, tractor) \u2227 Older(x, motorcyle))) ::: The oldest vehicle is older than all other vehicles.\n\u2200x (Newest(x) \u2192 (Newer(x, sedan) \u2227 Newer(x, tractor) \u2227 Newer(x, motorcyle) \u2227 Newer(x, limousine))) ::: The newest vehicle is newer than all other vehicles.\nConclusion:\nOldest(station_wagon) ::: Option A\nOldest(sedan) ::: Option B\nOldest(tractor) ::: Option C\nOldest(motorcyle) ::: Option D\nOldest(limousine) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([StationWagon, Sedan, Tractor, Motorcycle, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOldest = Function([Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: If x is newer than y, then y is older than x\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: If x is older than y, then y is newer than x\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive\nNewer(Tractor, Motorcycle) ::: The tractor is newer than the motorcycle\nNewer(Motorcycle, Sedan) ::: The motorcycle is newer than the sedan\nOldest(Limousine) ::: The limousine is the oldest\nNewest(StationWagon) ::: The station wagon is the newest\nForAll([x:Vehicle], Implies(Oldest(x), And(Older(x, StationWagon), Older(x, Sedan), Older(x, Tractor), Older(x, Motorcycle)))) ::: The oldest is older than all others\nForAll([x:Vehicle], Implies(Newest(x), And(Newer(x, Sedan), Newer(x, Tractor), Newer(x, Motorcycle), Newer(x, Limousine)))) ::: The newest is newer than all others\n# Options\nis_valid(Oldest(StationWagon)) ::: A) The station wagon is the oldest\nis_valid(Oldest(Sedan)) ::: B) The sedan is the oldest\nis_valid(Oldest(Tractor)) ::: C) The tractor is the oldest\nis_valid(Oldest(Motorcycle)) ::: D) The motorcycle is the oldest\nis_valid(Oldest(Limousine)) ::: E) The limousine is the oldest"
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest among the five vehicles.\nNewest($x, bool)                   ::: Vehicle $x is the newest among the five vehicles.\nFacts:\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(sedan,        True)       ::: The sedan.\nVehicle(tractor,      True)       ::: The tractor.\nVehicle(motorcyle,    True)       ::: The motorcyle.\nVehicle(limousine,    True)       ::: The limousine.\nNewer(tractor, motorcyle, True)   ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan, True)     ::: The motorcyle is newer than the sedan.\nOldest(limousine, True)           ::: The limousine is the oldest.\nNewest(station_wagon, True)       ::: The station wagon is the newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nOldest($x, True) >>> Older($x, station_wagon, True) && Older($x, sedan, True) && Older($x, tractor, True) && Older($x, motorcyle, True) ::: The oldest vehicle is older than all other vehicles.\nNewest($x, True) >>> Newer($x, sedan, True) && Newer($x, tractor, True) && Newer($x, motorcyle, True) && Newer($x, limousine, True) ::: The newest vehicle is newer than all other vehicles.\nQuery:\nOldest(station_wagon, True)       ::: Option A\nOldest(sedan,        True)       ::: Option B\nOldest(tractor,      True)       ::: Option C\nOldest(motorcyle,    True)       ::: Option D\nOldest(limousine,    True)       ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOldest(x) ::: Vehicle x is the oldest among the five vehicles.\nNewest(x) ::: Vehicle x is the newest among the five vehicles.\nPremises:\nVehicle(station_wagon) ::: The station wagon.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(motorcyle) ::: The motorcyle.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, motorcyle) ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan) ::: The motorcyle is newer than the sedan.\nOldest(limousine) ::: The limousine is the oldest.\nNewest(station_wagon) ::: The station wagon is the newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\n\u2200x (Oldest(x) \u2192 (Older(x, station_wagon) \u2227 Older(x, sedan) \u2227 Older(x, tractor) \u2227 Older(x, motorcyle))) ::: The oldest vehicle is older than all other vehicles.\n\u2200x (Newest(x) \u2192 (Newer(x, sedan) \u2227 Newer(x, tractor) \u2227 Newer(x, motorcyle) \u2227 Newer(x, limousine))) ::: The newest vehicle is newer than all other vehicles.\nConclusion:\nOldest(station_wagon) ::: Option A\nOldest(sedan) ::: Option B\nOldest(tractor) ::: Option C\nOldest(motorcyle) ::: Option D\nOldest(limousine) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([StationWagon, Sedan, Tractor, Motorcycle, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOldest = Function([Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: If x is newer than y, then y is older than x\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: If x is older than y, then y is newer than x\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive\nNewer(Tractor, Motorcycle) ::: The tractor is newer than the motorcycle\nNewer(Motorcycle, Sedan) ::: The motorcycle is newer than the sedan\nOldest(Limousine) ::: The limousine is the oldest\nNewest(StationWagon) ::: The station wagon is the newest\nForAll([x:Vehicle], Implies(Oldest(x), And(Older(x, StationWagon), Older(x, Sedan), Older(x, Tractor), Older(x, Motorcycle)))) ::: The oldest is older than all others\nForAll([x:Vehicle], Implies(Newest(x), And(Newer(x, Sedan), Newer(x, Tractor), Newer(x, Motorcycle), Newer(x, Limousine)))) ::: The newest is newer than all others\n# Options\nis_valid(Oldest(StationWagon)) ::: A) The station wagon is the oldest\nis_valid(Oldest(Sedan)) ::: B) The sedan is the oldest\nis_valid(Oldest(Tractor)) ::: C) The tractor is the oldest\nis_valid(Oldest(Motorcycle)) ::: D) The motorcycle is the oldest\nis_valid(Oldest(Limousine)) ::: E) The limousine is the oldest"
            }
        ]
    },
    {
        "id": "logical_deduction_3",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: watermelons, plums, apples, peaches, and kiwis. The apples are less expensive than the peaches. The plums are the cheapest. The kiwis are the second-cheapest. The watermelons are more expensive than the peaches.",
        "question": "Which of the following is true?",
        "options": [
            "A) The watermelons are the most expensive.",
            "B) The plums are the most expensive.",
            "C) The apples are the most expensive.",
            "D) The peaches are the most expensive.",
            "E) The kiwis are the most expensive."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest.\nSecondCheapest($x, bool)         ::: Fruit $x is the second cheapest.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(plums, True)               ::: The plums.\nFruit(apples, True)              ::: The apples.\nFruit(peaches, True)             ::: The peaches.\nFruit(kiwis, True)               ::: The kiwis.\nCheaper(apples, peaches, True)   ::: The apples are less expensive than the peaches.\nCheapest(plums, True)            ::: The plums are the cheapest.\nSecondCheapest(kiwis, True)      ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons, True) ::: The watermelons are more expensive than the peaches.\nRules:\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nCheapest($a, True) >>> Cheaper($a, $b, True) ::: The cheapest fruit is cheaper than all others.\nSecondCheapest($a, True) >>> Cheaper(plums, $a, True) && !Cheapest($a, True) ::: The second cheapest is cheaper than all except the cheapest.\nCheaper($a, $b, True) && Cheaper($b, $c, True) && Cheaper($c, $d, True) && Cheaper($d, $e, True) >>> MostExpensive($e, True) ::: The fruit more expensive than all others is the most expensive.\nQuery:\nMostExpensive(watermelons, True) ::: Option A\nMostExpensive(plums, True)       ::: Option B\nMostExpensive(apples, True)      ::: Option C\nMostExpensive(peaches, True)     ::: Option D\nMostExpensive(kiwis, True)       ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: Fruit x is cheaper than fruit y.\nCheapest(x) ::: Fruit x is the cheapest.\nSecondCheapest(x) ::: Fruit x is the second cheapest.\nMostExpensive(x) ::: Fruit x is the most expensive.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(plums) ::: The plums.\nFruit(apples) ::: The apples.\nFruit(peaches) ::: The peaches.\nFruit(kiwis) ::: The kiwis.\nCheaper(apples, peaches) ::: The apples are less expensive than the peaches.\nCheapest(plums) ::: The plums are the cheapest.\nSecondCheapest(kiwis) ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons) ::: The watermelons are more expensive than the peaches.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (Cheapest(x) \u2192 \u2200y (x \u2260 y \u2192 Cheaper(x, y))) ::: The cheapest fruit is cheaper than all others.\n\u2200x (SecondCheapest(x) \u2192 (Cheaper(plums, x) \u2227 \u00acCheapest(x))) ::: The second cheapest is cheaper than all except the cheapest.\n\u2200x \u2200y \u2200z \u2200w \u2200v (Cheaper(x, y) \u2227 Cheaper(y, z) \u2227 Cheaper(z, w) \u2227 Cheaper(w, v) \u2192 MostExpensive(v)) ::: The fruit more expensive than all others is the most expensive.\nConclusion:\nMostExpensive(watermelons) ::: Option A\nMostExpensive(plums) ::: Option B\nMostExpensive(apples) ::: Option C\nMostExpensive(peaches) ::: Option D\nMostExpensive(kiwis) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nFruit = EnumSort([Watermelons, Plums, Apples, Peaches, Kiwis])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nDistinct([f:Fruit], price(f)) ::: Each fruit has a unique price\nprice(Apples) < price(Peaches) ::: The apples are less expensive than the peaches.\nprice(Plums) == 1 ::: The plums are the cheapest.\nprice(Kiwis) == 2 ::: The kiwis are the second-cheapest.\nprice(Peaches) < price(Watermelons) ::: The watermelons are more expensive than the peaches.\n# Options\nis_valid(price(Watermelons) == 5) ::: A) The watermelons are the most expensive.\nis_valid(price(Plums) == 5) ::: B) The plums are the most expensive.\nis_valid(price(Apples) == 5) ::: C) The apples are the most expensive.\nis_valid(price(Peaches) == 5) ::: D) The peaches are the most expensive.\nis_valid(price(Kiwis) == 5) ::: E) The kiwis are the most expensive."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest.\nSecondCheapest($x, bool)         ::: Fruit $x is the second cheapest.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(plums, True)               ::: The plums.\nFruit(apples, True)              ::: The apples.\nFruit(peaches, True)             ::: The peaches.\nFruit(kiwis, True)               ::: The kiwis.\nCheaper(apples, peaches, True)   ::: The apples are less expensive than the peaches.\nCheapest(plums, True)            ::: The plums are the cheapest.\nSecondCheapest(kiwis, True)      ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons, True) ::: The watermelons are more expensive than the peaches.\nRules:\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nCheapest($a, True) >>> Cheaper($a, $b, True) ::: The cheapest fruit is cheaper than all others.\nSecondCheapest($a, True) >>> Cheaper(plums, $a, True) && !Cheapest($a, True) ::: The second cheapest is cheaper than all except the cheapest.\nCheaper($a, $b, True) && Cheaper($b, $c, True) && Cheaper($c, $d, True) && Cheaper($d, $e, True) >>> MostExpensive($e, True) ::: The fruit more expensive than all others is the most expensive.\nQuery:\nMostExpensive(watermelons, True) ::: Option A\nMostExpensive(plums, True)       ::: Option B\nMostExpensive(apples, True)      ::: Option C\nMostExpensive(peaches, True)     ::: Option D\nMostExpensive(kiwis, True)       ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: Fruit x is cheaper than fruit y.\nCheapest(x) ::: Fruit x is the cheapest.\nSecondCheapest(x) ::: Fruit x is the second cheapest.\nMostExpensive(x) ::: Fruit x is the most expensive.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(plums) ::: The plums.\nFruit(apples) ::: The apples.\nFruit(peaches) ::: The peaches.\nFruit(kiwis) ::: The kiwis.\nCheaper(apples, peaches) ::: The apples are less expensive than the peaches.\nCheapest(plums) ::: The plums are the cheapest.\nSecondCheapest(kiwis) ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons) ::: The watermelons are more expensive than the peaches.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (Cheapest(x) \u2192 \u2200y (x \u2260 y \u2192 Cheaper(x, y))) ::: The cheapest fruit is cheaper than all others.\n\u2200x (SecondCheapest(x) \u2192 (Cheaper(plums, x) \u2227 \u00acCheapest(x))) ::: The second cheapest is cheaper than all except the cheapest.\n\u2200x \u2200y \u2200z \u2200w \u2200v (Cheaper(x, y) \u2227 Cheaper(y, z) \u2227 Cheaper(z, w) \u2227 Cheaper(w, v) \u2192 MostExpensive(v)) ::: The fruit more expensive than all others is the most expensive.\nConclusion:\nMostExpensive(watermelons) ::: Option A\nMostExpensive(plums) ::: Option B\nMostExpensive(apples) ::: Option C\nMostExpensive(peaches) ::: Option D\nMostExpensive(kiwis) ::: Option E",
                "SAT": "# Declarations\nFruit = EnumSort([Watermelons, Plums, Apples, Peaches, Kiwis])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nDistinct([f:Fruit], price(f)) ::: Each fruit has a unique price\nprice(Apples) < price(Peaches) ::: The apples are less expensive than the peaches.\nprice(Plums) == 1 ::: The plums are the cheapest.\nprice(Kiwis) == 2 ::: The kiwis are the second-cheapest.\nprice(Peaches) < price(Watermelons) ::: The watermelons are more expensive than the peaches.\n# Options\nis_valid(price(Watermelons) == 5) ::: A) The watermelons are the most expensive.\nis_valid(price(Plums) == 5) ::: B) The plums are the most expensive.\nis_valid(price(Apples) == 5) ::: C) The apples are the most expensive.\nis_valid(price(Peaches) == 5) ::: D) The peaches are the most expensive.\nis_valid(price(Kiwis) == 5) ::: E) The kiwis are the most expensive."
            }
        ]
    },
    {
        "id": "logical_deduction_4",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a cardinal, a crow, a falcon, a robin, and a blue jay. The robin is to the right of the cardinal. The cardinal is to the right of the blue jay. The blue jay is the second from the left. The crow is the rightmost.",
        "question": "Which of the following is true?",
        "options": [
            "A) The cardinal is the second from the left.",
            "B) The crow is the second from the left.",
            "C) The falcon is the second from the left.",
            "D) The robin is the second from the left.",
            "E) The blue jay is the second from the left."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(crow,     True)            ::: The crow.\nBird(falcon,   True)            ::: The falcon.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nRightOf(robin, cardinal, True)  ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay, True) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay, True)  ::: The blue jay is the second from the left.\nRightMost(crow, True)           ::: The crow is the rightmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nSecondFromLeft($s, True) && LeftOf($s, $a, True) >>> LeftMost($a, True) ::: The bird immediately left of the second-from-left is the leftmost.\nRightMost($rm, True) && LeftOf($s, $rm, True) && LeftOf($t, $s, True) >>> SecondFromRight($s, True) ::: The bird immediately left of the rightmost is second from the right.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(crow,     True)  ::: Option B\nSecondFromLeft(falcon,   True)  ::: Option C\nSecondFromLeft(robin,    True)  ::: Option D\nSecondFromLeft(blue_jay, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(crow) ::: The crow.\nBird(falcon) ::: The falcon.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nRightOf(robin, cardinal) ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay) ::: The blue jay is the second from the left.\nRightMost(crow) ::: The crow is the rightmost.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z) ::: Right-of is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z) ::: Left-of is transitive.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y (LeftOf(y, x) \u2227 \u2200z (LeftOf(z, x) \u2192 z = y))) ::: The bird immediately left of the second-from-left is the leftmost.\n\u2200x (RightMost(x) \u2192 \u2203y (LeftOf(y, x) \u2227 \u2200z (LeftOf(z, x) \u2192 z = y))) ::: The bird immediately left of the rightmost is second from the right.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(crow) ::: Option B\nSecondFromLeft(falcon) ::: Option C\nSecondFromLeft(robin) ::: Option D\nSecondFromLeft(blue_jay) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Cardinal, Crow, Falcon, Robin, BlueJay])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) > pos(Cardinal) ::: The robin is to the right of the cardinal.\npos(Cardinal) > pos(BlueJay) ::: The cardinal is to the right of the blue jay.\npos(BlueJay) == 2 ::: The blue jay is the second from the left.\npos(Crow) == 5 ::: The crow is the rightmost.\n# Options\nis_valid(pos(Cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(Crow) == 2) ::: B) The crow is the second from the left.\nis_valid(pos(Falcon) == 2) ::: C) The falcon is the second from the left.\nis_valid(pos(Robin) == 2) ::: D) The robin is the second from the left.\nis_valid(pos(BlueJay) == 2) ::: E) The blue jay is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(crow,     True)            ::: The crow.\nBird(falcon,   True)            ::: The falcon.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nRightOf(robin, cardinal, True)  ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay, True) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay, True)  ::: The blue jay is the second from the left.\nRightMost(crow, True)           ::: The crow is the rightmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nSecondFromLeft($s, True) && LeftOf($s, $a, True) >>> LeftMost($a, True) ::: The bird immediately left of the second-from-left is the leftmost.\nRightMost($rm, True) && LeftOf($s, $rm, True) && LeftOf($t, $s, True) >>> SecondFromRight($s, True) ::: The bird immediately left of the rightmost is second from the right.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(crow,     True)  ::: Option B\nSecondFromLeft(falcon,   True)  ::: Option C\nSecondFromLeft(robin,    True)  ::: Option D\nSecondFromLeft(blue_jay, True)  ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(crow) ::: The crow.\nBird(falcon) ::: The falcon.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nRightOf(robin, cardinal) ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay) ::: The blue jay is the second from the left.\nRightMost(crow) ::: The crow is the rightmost.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z) ::: Right-of is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z) ::: Left-of is transitive.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y (LeftOf(y, x) \u2227 \u2200z (LeftOf(z, x) \u2192 z = y))) ::: The bird immediately left of the second-from-left is the leftmost.\n\u2200x (RightMost(x) \u2192 \u2203y (LeftOf(y, x) \u2227 \u2200z (LeftOf(z, x) \u2192 z = y))) ::: The bird immediately left of the rightmost is second from the right.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(crow) ::: Option B\nSecondFromLeft(falcon) ::: Option C\nSecondFromLeft(robin) ::: Option D\nSecondFromLeft(blue_jay) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Cardinal, Crow, Falcon, Robin, BlueJay])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) > pos(Cardinal) ::: The robin is to the right of the cardinal.\npos(Cardinal) > pos(BlueJay) ::: The cardinal is to the right of the blue jay.\npos(BlueJay) == 2 ::: The blue jay is the second from the left.\npos(Crow) == 5 ::: The crow is the rightmost.\n# Options\nis_valid(pos(Cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(Crow) == 2) ::: B) The crow is the second from the left.\nis_valid(pos(Falcon) == 2) ::: C) The falcon is the second from the left.\nis_valid(pos(Robin) == 2) ::: D) The robin is the second from the left.\nis_valid(pos(BlueJay) == 2) ::: E) The blue jay is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_5",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a convertible, a sedan, a station wagon, a bus, and a limousine. The sedan is newer than the station wagon. The limousine is the newest. The bus is the second-newest. The convertible is the second-oldest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The convertible is the second-oldest.",
            "B) The sedan is the second-oldest.",
            "C) The station wagon is the second-oldest.",
            "D) The bus is the second-oldest.",
            "E) The limousine is the second-oldest."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)               ::: Vehicle $x is newer than vehicle $y.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nSecondNewest($x, bool)             ::: Vehicle $x is the second-newest.\nSecondOldest($x, bool)             ::: Vehicle $x is the second-oldest.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(bus, True)                 ::: The bus.\nVehicle(limousine, True)           ::: The limousine.\nNewer(sedan, station_wagon, True)  ::: The sedan is newer than the station wagon.\nNewest(limousine, True)            ::: The limousine is the newest.\nSecondNewest(bus, True)            ::: The bus is the second-newest.\nSecondOldest(convertible, True)    ::: The convertible is the second-oldest.\nRules:\nNewer($a, $b, True) >>> Newer($b, $a, False) ::: If $a is newer than $b, then $b is not newer than $a.\nNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The newest vehicle is newer than all others.\nSecondNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newest($e, True) ::: The second-newest is newer than all except the newest.\nSecondOldest($a, True) >>> Newer($b, $a, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The second-oldest is newer than all except one.\nQuery:\nSecondOldest(convertible, True)    ::: Option A\nSecondOldest(sedan, True)          ::: Option B\nSecondOldest(station_wagon, True)  ::: Option C\nSecondOldest(bus, True)            ::: Option D\nSecondOldest(limousine, True)      ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nNewest(x) ::: Vehicle x is the newest.\nSecondNewest(x) ::: Vehicle x is the second-newest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(bus) ::: The bus.\nVehicle(limousine) ::: The limousine.\nNewer(sedan, station_wagon) ::: The sedan is newer than the station wagon.\nNewest(limousine) ::: The limousine is the newest.\nSecondNewest(bus) ::: The bus is the second-newest.\nSecondOldest(convertible) ::: The convertible is the second-oldest.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: \"Newer\" is asymmetric.\n\u2200x (Newest(x) \u2192 (\u2200y (x \u2260 y \u2192 Newer(x, y)))) ::: The newest is newer than all others.\n\u2200x (SecondNewest(x) \u2192 (\u2203y (Newest(y) \u2227 \u2200z (z \u2260 y \u2192 Newer(x, z))))) ::: The second-newest is newer than all except the newest.\n\u2200x (SecondOldest(x) \u2192 (\u2203y (Newer(y, x) \u2227 \u2200z (z \u2260 y \u2192 Newer(x, z))))) ::: The second-oldest is newer than all except one.\nConclusion:\nSecondOldest(convertible) ::: Option A\nSecondOldest(sedan) ::: Option B\nSecondOldest(station_wagon) ::: Option C\nSecondOldest(bus) ::: Option D\nSecondOldest(limousine) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, StationWagon, Bus, Limousine])\nage = Function([Vehicle] -> [IntSort()])\n# Constraints\nDistinct([v:Vehicle], age(v)) ::: Each vehicle has a unique age value\nage(Sedan) > age(StationWagon) ::: The sedan is newer than the station wagon.\nage(Limousine) == 5 ::: The limousine is the newest (highest age value).\nage(Bus) == 4 ::: The bus is the second-newest.\nage(Convertible) == 2 ::: The convertible is the second-oldest.\n# Options\nis_valid(age(Convertible) == 2) ::: A) The convertible is the second-oldest.\nis_valid(age(Sedan) == 2) ::: B) The sedan is the second-oldest.\nis_valid(age(StationWagon) == 2) ::: C) The station wagon is the second-oldest.\nis_valid(age(Bus) == 2) ::: D) The bus is the second-oldest.\nis_valid(age(Limousine) == 2) ::: E) The limousine is the second-oldest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)               ::: Vehicle $x is newer than vehicle $y.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nSecondNewest($x, bool)             ::: Vehicle $x is the second-newest.\nSecondOldest($x, bool)             ::: Vehicle $x is the second-oldest.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(bus, True)                 ::: The bus.\nVehicle(limousine, True)           ::: The limousine.\nNewer(sedan, station_wagon, True)  ::: The sedan is newer than the station wagon.\nNewest(limousine, True)            ::: The limousine is the newest.\nSecondNewest(bus, True)            ::: The bus is the second-newest.\nSecondOldest(convertible, True)    ::: The convertible is the second-oldest.\nRules:\nNewer($a, $b, True) >>> Newer($b, $a, False) ::: If $a is newer than $b, then $b is not newer than $a.\nNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The newest vehicle is newer than all others.\nSecondNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newest($e, True) ::: The second-newest is newer than all except the newest.\nSecondOldest($a, True) >>> Newer($b, $a, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The second-oldest is newer than all except one.\nQuery:\nSecondOldest(convertible, True)    ::: Option A\nSecondOldest(sedan, True)          ::: Option B\nSecondOldest(station_wagon, True)  ::: Option C\nSecondOldest(bus, True)            ::: Option D\nSecondOldest(limousine, True)      ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nNewest(x) ::: Vehicle x is the newest.\nSecondNewest(x) ::: Vehicle x is the second-newest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(bus) ::: The bus.\nVehicle(limousine) ::: The limousine.\nNewer(sedan, station_wagon) ::: The sedan is newer than the station wagon.\nNewest(limousine) ::: The limousine is the newest.\nSecondNewest(bus) ::: The bus is the second-newest.\nSecondOldest(convertible) ::: The convertible is the second-oldest.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: \"Newer\" is asymmetric.\n\u2200x (Newest(x) \u2192 (\u2200y (x \u2260 y \u2192 Newer(x, y)))) ::: The newest is newer than all others.\n\u2200x (SecondNewest(x) \u2192 (\u2203y (Newest(y) \u2227 \u2200z (z \u2260 y \u2192 Newer(x, z))))) ::: The second-newest is newer than all except the newest.\n\u2200x (SecondOldest(x) \u2192 (\u2203y (Newer(y, x) \u2227 \u2200z (z \u2260 y \u2192 Newer(x, z))))) ::: The second-oldest is newer than all except one.\nConclusion:\nSecondOldest(convertible) ::: Option A\nSecondOldest(sedan) ::: Option B\nSecondOldest(station_wagon) ::: Option C\nSecondOldest(bus) ::: Option D\nSecondOldest(limousine) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, StationWagon, Bus, Limousine])\nage = Function([Vehicle] -> [IntSort()])\n# Constraints\nDistinct([v:Vehicle], age(v)) ::: Each vehicle has a unique age value\nage(Sedan) > age(StationWagon) ::: The sedan is newer than the station wagon.\nage(Limousine) == 5 ::: The limousine is the newest (highest age value).\nage(Bus) == 4 ::: The bus is the second-newest.\nage(Convertible) == 2 ::: The convertible is the second-oldest.\n# Options\nis_valid(age(Convertible) == 2) ::: A) The convertible is the second-oldest.\nis_valid(age(Sedan) == 2) ::: B) The sedan is the second-oldest.\nis_valid(age(StationWagon) == 2) ::: C) The station wagon is the second-oldest.\nis_valid(age(Bus) == 2) ::: D) The bus is the second-oldest.\nis_valid(age(Limousine) == 2) ::: E) The limousine is the second-oldest."
            }
        ]
    },
    {
        "id": "logical_deduction_6",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a crow, a robin, a quail, a blue jay, and a falcon. The robin is to the left of the quail. The falcon is the third from the left. The crow is to the left of the falcon. The blue jay is the leftmost.",
        "question": "Which of the following is true?",
        "options": [
            "A) The crow is the third from the left.",
            "B) The robin is the third from the left.",
            "C) The quail is the third from the left.",
            "D) The blue jay is the third from the left.",
            "E) The falcon is the third from the left."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nPosition($x, $n, bool)          ::: Bird $x is in position $n from the left (1-based index).\nFacts:\nBird(crow, True)                ::: The crow.\nBird(robin, True)               ::: The robin.\nBird(quail, True)               ::: The quail.\nBird(blue_jay, True)            ::: The blue jay.\nBird(falcon, True)              ::: The falcon.\nLeftOf(robin, quail, True)      ::: The robin is to the left of the quail.\nPosition(falcon, 3, True)       ::: The falcon is the third from the left.\nLeftOf(crow, falcon, True)      ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1, True)     ::: The blue jay is the leftmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nPosition($a, $n, True) >>> !Position($a, $m, True) for all $m != $n ::: Each bird has a unique position.\nPosition($a, $n, True) >>> !Position($b, $n, True) for all $b != $a ::: Each position is occupied by only one bird.\nLeftOf($a, $b, True) >>> Position($a, $n, True) && Position($b, $m, True) && $n < $m ::: LeftOf implies position ordering.\nQuery:\nPosition(crow, 3, True)        ::: Option A\nPosition(robin, 3, True)       ::: Option B\nPosition(quail, 3, True)       ::: Option C\nPosition(blue_jay, 3, True)    ::: Option D\nPosition(falcon, 3, True)      ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nPosition(x, n) ::: Bird x is in position n from the left (1-based index).\nPremises:\nBird(crow) ::: The crow.\nBird(robin) ::: The robin.\nBird(quail) ::: The quail.\nBird(blue_jay) ::: The blue jay.\nBird(falcon) ::: The falcon.\nLeftOf(robin, quail) ::: The robin is to the left of the quail.\nPosition(falcon, 3) ::: The falcon is the third from the left.\nLeftOf(crow, falcon) ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1) ::: The blue jay is the leftmost.\n\u2200x \u2200y (LeftOf(x, y) \u2192 Position(x, n) \u2227 Position(y, m) \u2227 n < m) ::: LeftOf implies position ordering.\n\u2200x \u2200n \u2200m (Position(x, n) \u2227 Position(x, m) \u2192 n = m) ::: Each bird has a unique position.\n\u2200n \u2200x \u2200y (Position(x, n) \u2227 Position(y, n) \u2192 x = y) ::: Each position is occupied by only one bird.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\nConclusion:\nPosition(crow, 3) ::: Option A\nPosition(robin, 3) ::: Option B\nPosition(quail, 3) ::: Option C\nPosition(blue_jay, 3) ::: Option D\nPosition(falcon, 3) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Crow, Robin, Quail, BlueJay, Falcon])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) < pos(Quail) ::: The robin is to the left of the quail.\npos(Falcon) == 3 ::: The falcon is the third from the left.\npos(Crow) < pos(Falcon) ::: The crow is to the left of the falcon.\npos(BlueJay) == 1 ::: The blue jay is the leftmost.\n# Options\nis_valid(pos(Crow) == 3) ::: A) The crow is the third from the left.\nis_valid(pos(Robin) == 3) ::: B) The robin is the third from the left.\nis_valid(pos(Quail) == 3) ::: C) The quail is the third from the left.\nis_valid(pos(BlueJay) == 3) ::: D) The blue jay is the third from the left.\nis_valid(pos(Falcon) == 3) ::: E) The falcon is the third from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nPosition($x, $n, bool)          ::: Bird $x is in position $n from the left (1-based index).\nFacts:\nBird(crow, True)                ::: The crow.\nBird(robin, True)               ::: The robin.\nBird(quail, True)               ::: The quail.\nBird(blue_jay, True)            ::: The blue jay.\nBird(falcon, True)              ::: The falcon.\nLeftOf(robin, quail, True)      ::: The robin is to the left of the quail.\nPosition(falcon, 3, True)       ::: The falcon is the third from the left.\nLeftOf(crow, falcon, True)      ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1, True)     ::: The blue jay is the leftmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nPosition($a, $n, True) >>> !Position($a, $m, True) for all $m != $n ::: Each bird has a unique position.\nPosition($a, $n, True) >>> !Position($b, $n, True) for all $b != $a ::: Each position is occupied by only one bird.\nLeftOf($a, $b, True) >>> Position($a, $n, True) && Position($b, $m, True) && $n < $m ::: LeftOf implies position ordering.\nQuery:\nPosition(crow, 3, True)        ::: Option A\nPosition(robin, 3, True)       ::: Option B\nPosition(quail, 3, True)       ::: Option C\nPosition(blue_jay, 3, True)    ::: Option D\nPosition(falcon, 3, True)      ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nPosition(x, n) ::: Bird x is in position n from the left (1-based index).\nPremises:\nBird(crow) ::: The crow.\nBird(robin) ::: The robin.\nBird(quail) ::: The quail.\nBird(blue_jay) ::: The blue jay.\nBird(falcon) ::: The falcon.\nLeftOf(robin, quail) ::: The robin is to the left of the quail.\nPosition(falcon, 3) ::: The falcon is the third from the left.\nLeftOf(crow, falcon) ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1) ::: The blue jay is the leftmost.\n\u2200x \u2200y (LeftOf(x, y) \u2192 Position(x, n) \u2227 Position(y, m) \u2227 n < m) ::: LeftOf implies position ordering.\n\u2200x \u2200n \u2200m (Position(x, n) \u2227 Position(x, m) \u2192 n = m) ::: Each bird has a unique position.\n\u2200n \u2200x \u2200y (Position(x, n) \u2227 Position(y, n) \u2192 x = y) ::: Each position is occupied by only one bird.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\nConclusion:\nPosition(crow, 3) ::: Option A\nPosition(robin, 3) ::: Option B\nPosition(quail, 3) ::: Option C\nPosition(blue_jay, 3) ::: Option D\nPosition(falcon, 3) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Crow, Robin, Quail, BlueJay, Falcon])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) < pos(Quail) ::: The robin is to the left of the quail.\npos(Falcon) == 3 ::: The falcon is the third from the left.\npos(Crow) < pos(Falcon) ::: The crow is to the left of the falcon.\npos(BlueJay) == 1 ::: The blue jay is the leftmost.\n# Options\nis_valid(pos(Crow) == 3) ::: A) The crow is the third from the left.\nis_valid(pos(Robin) == 3) ::: B) The robin is the third from the left.\nis_valid(pos(Quail) == 3) ::: C) The quail is the third from the left.\nis_valid(pos(BlueJay) == 3) ::: D) The blue jay is the third from the left.\nis_valid(pos(Falcon) == 3) ::: E) The falcon is the third from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_7",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a cardinal, a robin, a blue jay, a quail, and a raven. The robin is to the right of the raven. The cardinal is the leftmost. The raven is to the right of the blue jay. The blue jay is the third from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The cardinal is the second from the left.",
            "B) The robin is the second from the left.",
            "C) The blue jay is the second from the left.",
            "D) The quail is the second from the left.",
            "E) The raven is the second from the left."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nThirdFromLeft($x, bool)         ::: Bird $x is the third bird from the left.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(quail,    True)            ::: The quail.\nBird(raven,    True)            ::: The raven.\nRightOf(robin, raven,   True)   ::: The robin is to the right of the raven.\nLeftMost(cardinal, True)        ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay, True)  ::: The raven is to the right of the blue jay.\nThirdFromLeft(blue_jay, True)   ::: The blue jay is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftMost($lm, True) && LeftOf($lm, $s, True) >>> SecondFromLeft($s, True) ::: The bird immediately right of the left-most is second from the left.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(robin,    True)  ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(quail,    True)  ::: Option D\nSecondFromLeft(raven,    True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nThirdFromLeft(x) ::: Bird x is the third bird from the left.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(quail) ::: The quail.\nBird(raven) ::: The raven.\nRightOf(robin, raven) ::: The robin is to the right of the raven.\nLeftMost(cardinal) ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay) ::: The raven is to the right of the blue jay.\nThirdFromLeft(blue_jay) ::: The blue jay is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (LeftMost(x) \u2227 LeftOf(x, y) \u2192 SecondFromLeft(y)) ::: The bird immediately right of the left-most is second from the left.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(quail) ::: Option D\nSecondFromLeft(raven) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Cardinal, Robin, BlueJay, Quail, Raven])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) > pos(Raven) ::: The robin is to the right of the raven.\npos(Cardinal) == 1 ::: The cardinal is the leftmost.\npos(Raven) > pos(BlueJay) ::: The raven is to the right of the blue jay.\npos(BlueJay) == 3 ::: The blue jay is the third from the left.\n# Options\nis_valid(pos(Cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(Robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(BlueJay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(Quail) == 2) ::: D) The quail is the second from the left.\nis_valid(pos(Raven) == 2) ::: E) The raven is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nThirdFromLeft($x, bool)         ::: Bird $x is the third bird from the left.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(quail,    True)            ::: The quail.\nBird(raven,    True)            ::: The raven.\nRightOf(robin, raven,   True)   ::: The robin is to the right of the raven.\nLeftMost(cardinal, True)        ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay, True)  ::: The raven is to the right of the blue jay.\nThirdFromLeft(blue_jay, True)   ::: The blue jay is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftMost($lm, True) && LeftOf($lm, $s, True) >>> SecondFromLeft($s, True) ::: The bird immediately right of the left-most is second from the left.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(robin,    True)  ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(quail,    True)  ::: Option D\nSecondFromLeft(raven,    True)  ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nThirdFromLeft(x) ::: Bird x is the third bird from the left.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(quail) ::: The quail.\nBird(raven) ::: The raven.\nRightOf(robin, raven) ::: The robin is to the right of the raven.\nLeftMost(cardinal) ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay) ::: The raven is to the right of the blue jay.\nThirdFromLeft(blue_jay) ::: The blue jay is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (LeftMost(x) \u2227 LeftOf(x, y) \u2192 SecondFromLeft(y)) ::: The bird immediately right of the left-most is second from the left.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(quail) ::: Option D\nSecondFromLeft(raven) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Cardinal, Robin, BlueJay, Quail, Raven])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) > pos(Raven) ::: The robin is to the right of the raven.\npos(Cardinal) == 1 ::: The cardinal is the leftmost.\npos(Raven) > pos(BlueJay) ::: The raven is to the right of the blue jay.\npos(BlueJay) == 3 ::: The blue jay is the third from the left.\n# Options\nis_valid(pos(Cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(Robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(BlueJay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(Quail) == 2) ::: D) The quail is the second from the left.\nis_valid(pos(Raven) == 2) ::: E) The raven is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_8",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: an owl, a robin, a blue jay, a hawk, and a hummingbird. The owl is the second from the right. The robin is the second from the left. The robin is to the right of the blue jay. The hummingbird is to the right of the hawk.",
        "question": "Which of the following is true?",
        "options": [
            "A) The owl is the rightmost.",
            "B) The robin is the rightmost.",
            "C) The blue jay is the rightmost.",
            "D) The hawk is the rightmost.",
            "E) The hummingbird is the rightmost."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(owl, True)                 ::: The owl.\nBird(robin, True)               ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk, True)                ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nRightOf($b, owl, True) && RightOf($b, robin, True) && RightOf($b, blue_jay, True) && RightOf($b, hawk, True) >>> RightMost($b, True) ::: A bird that is to the right of all the other four is the right-most bird.\nRightMost($rm, True) && RightOf($rm, $s, True) && RightOf($s, owl, True) && RightOf($s, robin, True) && RightOf($s, blue_jay, True) >>> SecondFromRight($s, True) ::: The bird immediately left of the right-most\u2014and still right of the remaining three\u2014is second from the right.\nQuery:\nRightMost(owl, True)            ::: Option A\nRightMost(robin, True)          ::: Option B\nRightMost(blue_jay, True)       ::: Option C\nRightMost(hawk, True)           ::: Option D\nRightMost(hummingbird, True)    ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(owl) ::: The owl.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(hawk) ::: The hawk.\nBird(hummingbird) ::: The hummingbird.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nRightOf(robin, blue_jay) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (RightOf(x, owl) \u2227 RightOf(x, robin) \u2227 RightOf(x, blue_jay) \u2227 RightOf(x, hawk) \u2192 RightMost(x)) ::: A bird to the right of all others is right-most.\n\u2200rm \u2200s (RightMost(rm) \u2227 RightOf(rm, s) \u2227 RightOf(s, owl) \u2227 RightOf(s, robin) \u2227 RightOf(s, blue_jay) \u2192 SecondFromRight(s)) ::: The bird immediately left of the right-most is second from right.\nConclusion:\nRightMost(owl) ::: Option A\nRightMost(robin) ::: Option B\nRightMost(blue_jay) ::: Option C\nRightMost(hawk) ::: Option D\nRightMost(hummingbird) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Owl, Robin, BlueJay, Hawk, Hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Owl) == 4 ::: The owl is the second from the right.\npos(Robin) == 2 ::: The robin is the second from the left.\npos(Robin) > pos(BlueJay) ::: The robin is to the right of the blue jay.\npos(Hummingbird) > pos(Hawk) ::: The hummingbird is to the right of the hawk.\n# Options\nis_valid(pos(Owl) == 5) ::: A) The owl is the rightmost.\nis_valid(pos(Robin) == 5) ::: B) The robin is the rightmost.\nis_valid(pos(BlueJay) == 5) ::: C) The blue jay is the rightmost.\nis_valid(pos(Hawk) == 5) ::: D) The hawk is the rightmost.\nis_valid(pos(Hummingbird) == 5) ::: E) The hummingbird is the rightmost."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(owl, True)                 ::: The owl.\nBird(robin, True)               ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk, True)                ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nRightOf($b, owl, True) && RightOf($b, robin, True) && RightOf($b, blue_jay, True) && RightOf($b, hawk, True) >>> RightMost($b, True) ::: A bird that is to the right of all the other four is the right-most bird.\nRightMost($rm, True) && RightOf($rm, $s, True) && RightOf($s, owl, True) && RightOf($s, robin, True) && RightOf($s, blue_jay, True) >>> SecondFromRight($s, True) ::: The bird immediately left of the right-most\u2014and still right of the remaining three\u2014is second from the right.\nQuery:\nRightMost(owl, True)            ::: Option A\nRightMost(robin, True)          ::: Option B\nRightMost(blue_jay, True)       ::: Option C\nRightMost(hawk, True)           ::: Option D\nRightMost(hummingbird, True)    ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(owl) ::: The owl.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(hawk) ::: The hawk.\nBird(hummingbird) ::: The hummingbird.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nRightOf(robin, blue_jay) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (RightOf(x, owl) \u2227 RightOf(x, robin) \u2227 RightOf(x, blue_jay) \u2227 RightOf(x, hawk) \u2192 RightMost(x)) ::: A bird to the right of all others is right-most.\n\u2200rm \u2200s (RightMost(rm) \u2227 RightOf(rm, s) \u2227 RightOf(s, owl) \u2227 RightOf(s, robin) \u2227 RightOf(s, blue_jay) \u2192 SecondFromRight(s)) ::: The bird immediately left of the right-most is second from right.\nConclusion:\nRightMost(owl) ::: Option A\nRightMost(robin) ::: Option B\nRightMost(blue_jay) ::: Option C\nRightMost(hawk) ::: Option D\nRightMost(hummingbird) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Owl, Robin, BlueJay, Hawk, Hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Owl) == 4 ::: The owl is the second from the right.\npos(Robin) == 2 ::: The robin is the second from the left.\npos(Robin) > pos(BlueJay) ::: The robin is to the right of the blue jay.\npos(Hummingbird) > pos(Hawk) ::: The hummingbird is to the right of the hawk.\n# Options\nis_valid(pos(Owl) == 5) ::: A) The owl is the rightmost.\nis_valid(pos(Robin) == 5) ::: B) The robin is the rightmost.\nis_valid(pos(BlueJay) == 5) ::: C) The blue jay is the rightmost.\nis_valid(pos(Hawk) == 5) ::: D) The hawk is the rightmost.\nis_valid(pos(Hummingbird) == 5) ::: E) The hummingbird is the rightmost."
            }
        ]
    },
    {
        "id": "logical_deduction_9",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a brown book, an orange book, a red book, a purple book, and a black book. The purple book is to the left of the black book. The red book is to the right of the brown book. The orange book is the second from the left. The black book is the third from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The brown book is the second from the right.",
            "B) The orange book is the second from the right.",
            "C) The red book is the second from the right.",
            "D) The purple book is the second from the right.",
            "E) The black book is the second from the right."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nPosition($x, $n, bool)          ::: Book $x is at position $n (1-based, left to right).\nFacts:\nBook(brown,  True)              ::: The brown book.\nBook(orange, True)              ::: The orange book.\nBook(red,    True)              ::: The red book.\nBook(purple, True)              ::: The purple book.\nBook(black,  True)              ::: The black book.\nLeftOf(purple, black,  True)    ::: The purple book is to the left of the black book.\nRightOf(red,   brown,  True)    ::: The red book is to the right of the brown book.\nPosition(orange, 2, True)       ::: The orange book is the second from the left.\nPosition(black, 3, True)        ::: The black book is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nPosition($a, $n, True) && Position($b, $m, True) && $n < $m >>> LeftOf($a, $b, True) ::: If $a is at a lower position than $b, then $a is left of $b.\nPosition($a, $n, True) && Position($b, $m, True) && $n > $m >>> RightOf($a, $b, True) ::: If $a is at a higher position than $b, then $a is right of $b.\nPosition($rm, 5, True) >>> RightMost($rm, True) ::: The book at position 5 is the right\u2011most book.\nPosition($s, 4, True) >>> SecondFromRight($s, True) ::: The book at position 4 is the second from the right.\nQuery:\nSecondFromRight(brown,  True)  ::: Option A\nSecondFromRight(orange, True)  ::: Option B\nSecondFromRight(red,    True)  ::: Option C\nSecondFromRight(purple, True)  ::: Option D\nSecondFromRight(black,  True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nRightMost(x) ::: Book x is the right-most book on the shelf.\nSecondFromRight(x) ::: Book x is the second book from the right.\nPosition(x, n) ::: Book x is at position n (1-based, left to right).\nPremises:\nBook(brown) ::: The brown book.\nBook(orange) ::: The orange book.\nBook(red) ::: The red book.\nBook(purple) ::: The purple book.\nBook(black) ::: The black book.\nLeftOf(purple, black) ::: The purple book is to the left of the black book.\nRightOf(red, brown) ::: The red book is to the right of the brown book.\nPosition(orange, 2) ::: The orange book is the second from the left.\nPosition(black, 3) ::: The black book is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y \u2200n \u2200m (Position(x, n) \u2227 Position(y, m) \u2227 (n < m) \u2192 LeftOf(x, y)) ::: If x is at a lower position than y, then x is left of y.\n\u2200x \u2200y \u2200n \u2200m (Position(x, n) \u2227 Position(y, m) \u2227 (n > m) \u2192 RightOf(x, y)) ::: If x is at a higher position than y, then x is right of y.\n\u2200x (Position(x, 5) \u2192 RightMost(x)) ::: The book at position 5 is the right-most book.\n\u2200x (Position(x, 4) \u2192 SecondFromRight(x)) ::: The book at position 4 is the second from the right.\nConclusion:\nSecondFromRight(brown) ::: Option A\nSecondFromRight(orange) ::: Option B\nSecondFromRight(red) ::: Option C\nSecondFromRight(purple) ::: Option D\nSecondFromRight(black) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Brown, Orange, Red, Purple, Black])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Purple) < pos(Black) ::: The purple book is to the left of the black book.\npos(Red) > pos(Brown) ::: The red book is to the right of the brown book.\npos(Orange) == 2 ::: The orange book is the second from the left.\npos(Black) == 3 ::: The black book is the third from the left.\n# Options\nis_valid(pos(Brown) == 4) ::: A) The brown book is the second from the right.\nis_valid(pos(Orange) == 4) ::: B) The orange book is the second from the right.\nis_valid(pos(Red) == 4) ::: C) The red book is the second from the right.\nis_valid(pos(Purple) == 4) ::: D) The purple book is the second from the right.\nis_valid(pos(Black) == 4) ::: E) The black book is the second from the right."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nPosition($x, $n, bool)          ::: Book $x is at position $n (1-based, left to right).\nFacts:\nBook(brown,  True)              ::: The brown book.\nBook(orange, True)              ::: The orange book.\nBook(red,    True)              ::: The red book.\nBook(purple, True)              ::: The purple book.\nBook(black,  True)              ::: The black book.\nLeftOf(purple, black,  True)    ::: The purple book is to the left of the black book.\nRightOf(red,   brown,  True)    ::: The red book is to the right of the brown book.\nPosition(orange, 2, True)       ::: The orange book is the second from the left.\nPosition(black, 3, True)        ::: The black book is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nPosition($a, $n, True) && Position($b, $m, True) && $n < $m >>> LeftOf($a, $b, True) ::: If $a is at a lower position than $b, then $a is left of $b.\nPosition($a, $n, True) && Position($b, $m, True) && $n > $m >>> RightOf($a, $b, True) ::: If $a is at a higher position than $b, then $a is right of $b.\nPosition($rm, 5, True) >>> RightMost($rm, True) ::: The book at position 5 is the right\u2011most book.\nPosition($s, 4, True) >>> SecondFromRight($s, True) ::: The book at position 4 is the second from the right.\nQuery:\nSecondFromRight(brown,  True)  ::: Option A\nSecondFromRight(orange, True)  ::: Option B\nSecondFromRight(red,    True)  ::: Option C\nSecondFromRight(purple, True)  ::: Option D\nSecondFromRight(black,  True)  ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nRightMost(x) ::: Book x is the right-most book on the shelf.\nSecondFromRight(x) ::: Book x is the second book from the right.\nPosition(x, n) ::: Book x is at position n (1-based, left to right).\nPremises:\nBook(brown) ::: The brown book.\nBook(orange) ::: The orange book.\nBook(red) ::: The red book.\nBook(purple) ::: The purple book.\nBook(black) ::: The black book.\nLeftOf(purple, black) ::: The purple book is to the left of the black book.\nRightOf(red, brown) ::: The red book is to the right of the brown book.\nPosition(orange, 2) ::: The orange book is the second from the left.\nPosition(black, 3) ::: The black book is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y \u2200n \u2200m (Position(x, n) \u2227 Position(y, m) \u2227 (n < m) \u2192 LeftOf(x, y)) ::: If x is at a lower position than y, then x is left of y.\n\u2200x \u2200y \u2200n \u2200m (Position(x, n) \u2227 Position(y, m) \u2227 (n > m) \u2192 RightOf(x, y)) ::: If x is at a higher position than y, then x is right of y.\n\u2200x (Position(x, 5) \u2192 RightMost(x)) ::: The book at position 5 is the right-most book.\n\u2200x (Position(x, 4) \u2192 SecondFromRight(x)) ::: The book at position 4 is the second from the right.\nConclusion:\nSecondFromRight(brown) ::: Option A\nSecondFromRight(orange) ::: Option B\nSecondFromRight(red) ::: Option C\nSecondFromRight(purple) ::: Option D\nSecondFromRight(black) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Brown, Orange, Red, Purple, Black])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Purple) < pos(Black) ::: The purple book is to the left of the black book.\npos(Red) > pos(Brown) ::: The red book is to the right of the brown book.\npos(Orange) == 2 ::: The orange book is the second from the left.\npos(Black) == 3 ::: The black book is the third from the left.\n# Options\nis_valid(pos(Brown) == 4) ::: A) The brown book is the second from the right.\nis_valid(pos(Orange) == 4) ::: B) The orange book is the second from the right.\nis_valid(pos(Red) == 4) ::: C) The red book is the second from the right.\nis_valid(pos(Purple) == 4) ::: D) The purple book is the second from the right.\nis_valid(pos(Black) == 4) ::: E) The black book is the second from the right."
            }
        ]
    },
    {
        "id": "logical_deduction_10",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: an owl, a robin, a blue jay, a hawk, and a hummingbird. The owl is the second from the right. The robin is the second from the left. The robin is to the right of the blue jay. The hummingbird is to the right of the hawk.",
        "question": "Which of the following is true?",
        "options": [
            "A) The owl is the second from the left.",
            "B) The robin is the second from the left.",
            "C) The blue jay is the second from the left.",
            "D) The hawk is the second from the left.",
            "E) The hummingbird is the second from the left."
        ],
        "answer": "B",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nFacts:\nBird(owl,      True)            ::: The owl.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk,     True)            ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nSecondFromLeft($a, True) >>> LeftOf($a, $b, True) && LeftOf($c, $a, True) ::: $a is second from the left if it is between $c and $b.\nSecondFromRight($a, True) >>> RightOf($a, $b, True) && RightOf($c, $a, True) ::: $a is second from the right if it is between $c and $b.\nQuery:\nSecondFromLeft(owl,      True)  ::: Option A\nSecondFromLeft(robin,    True)  ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(hawk,     True)  ::: Option D\nSecondFromLeft(hummingbird, True) ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nPremises:\nBird(owl) ::: The owl.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(hawk) ::: The hawk.\nBird(hummingbird) ::: The hummingbird.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nRightOf(robin, blue_jay) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (SecondFromLeft(x) \u2192 (\u2203y \u2203z (LeftOf(y, x) \u2227 LeftOf(x, z)))) ::: x is second from left if it has one bird to its left and one to its right.\n\u2200x (SecondFromRight(x) \u2192 (\u2203y \u2203z (RightOf(y, x) \u2227 RightOf(x, z)))) ::: x is second from right if it has one bird to its right and one to its left.\nConclusion:\nSecondFromLeft(owl) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(hawk) ::: Option D\nSecondFromLeft(hummingbird) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([owl, robin, blue_jay, hawk, hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(owl) == 4 ::: The owl is the second from the right.\npos(robin) == 2 ::: The robin is the second from the left.\npos(robin) > pos(blue_jay) ::: The robin is to the right of the blue jay.\npos(hummingbird) > pos(hawk) ::: The hummingbird is to the right of the hawk.\n# Options\nis_valid(pos(owl) == 2) ::: A) The owl is the second from the left.\nis_valid(pos(robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(blue_jay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(hawk) == 2) ::: D) The hawk is the second from the left.\nis_valid(pos(hummingbird) == 2) ::: E) The hummingbird is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nFacts:\nBird(owl,      True)            ::: The owl.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk,     True)            ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nSecondFromLeft($a, True) >>> LeftOf($a, $b, True) && LeftOf($c, $a, True) ::: $a is second from the left if it is between $c and $b.\nSecondFromRight($a, True) >>> RightOf($a, $b, True) && RightOf($c, $a, True) ::: $a is second from the right if it is between $c and $b.\nQuery:\nSecondFromLeft(owl,      True)  ::: Option A\nSecondFromLeft(robin,    True)  ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(hawk,     True)  ::: Option D\nSecondFromLeft(hummingbird, True) ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nPremises:\nBird(owl) ::: The owl.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(hawk) ::: The hawk.\nBird(hummingbird) ::: The hummingbird.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nRightOf(robin, blue_jay) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (SecondFromLeft(x) \u2192 (\u2203y \u2203z (LeftOf(y, x) \u2227 LeftOf(x, z)))) ::: x is second from left if it has one bird to its left and one to its right.\n\u2200x (SecondFromRight(x) \u2192 (\u2203y \u2203z (RightOf(y, x) \u2227 RightOf(x, z)))) ::: x is second from right if it has one bird to its right and one to its left.\nConclusion:\nSecondFromLeft(owl) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(hawk) ::: Option D\nSecondFromLeft(hummingbird) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([owl, robin, blue_jay, hawk, hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(owl) == 4 ::: The owl is the second from the right.\npos(robin) == 2 ::: The robin is the second from the left.\npos(robin) > pos(blue_jay) ::: The robin is to the right of the blue jay.\npos(hummingbird) > pos(hawk) ::: The hummingbird is to the right of the hawk.\n# Options\nis_valid(pos(owl) == 2) ::: A) The owl is the second from the left.\nis_valid(pos(robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(blue_jay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(hawk) == 2) ::: D) The hawk is the second from the left.\nis_valid(pos(hummingbird) == 2) ::: E) The hummingbird is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_11",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a convertible, a truck, a bus, a sedan, and a motorcyle. The bus is newer than the truck. The truck is newer than the convertible. The sedan is the second-oldest. The motorcyle is newer than the bus.",
        "question": "Which of the following is true?",
        "options": [
            "A) The convertible is the newest.",
            "B) The truck is the newest.",
            "C) The bus is the newest.",
            "D) The sedan is the newest.",
            "E) The motorcyle is the newest."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(truck,       True)         ::: The truck.\nVehicle(bus,         True)         ::: The bus.\nVehicle(sedan,       True)         ::: The sedan.\nVehicle(motorcyle,   True)         ::: The motorcyle.\nNewer(bus, truck,    True)         ::: The bus is newer than the truck.\nNewer(truck, convertible, True)    ::: The truck is newer than the convertible.\nNewer(motorcyle, bus, True)        ::: The motorcyle is newer than the bus.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($a, $c, True) && Older($a, $d, True) && Older($a, $e, True) >>> Oldest($a, True) ::: A vehicle older than all others is the oldest.\nNewer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) >>> Newest($a, True) ::: A vehicle newer than all others is the newest.\nQuery:\nNewest(convertible, True)  ::: Option A\nNewest(truck,       True)  ::: Option B\nNewest(bus,         True)  ::: Option C\nNewest(sedan,       True)  ::: Option D\nNewest(motorcyle,   True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nNewest(x) ::: Vehicle x is the newest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(truck) ::: The truck.\nVehicle(bus) ::: The bus.\nVehicle(sedan) ::: The sedan.\nVehicle(motorcyle) ::: The motorcyle.\nNewer(bus, truck) ::: The bus is newer than the truck.\nNewer(truck, convertible) ::: The truck is newer than the convertible.\nNewer(motorcyle, bus) ::: The motorcyle is newer than the bus.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: \"Newer\" is asymmetric.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: \"Newer\" is transitive.\n\u2200x (Oldest(x) \u2194 (Vehicle(x) \u2227 \u2200y (Vehicle(y) \u2227 y \u2260 x \u2192 Newer(y, x)))) ::: Definition of oldest.\n\u2200x (Newest(x) \u2194 (Vehicle(x) \u2227 \u2200y (Vehicle(y) \u2227 y \u2260 x \u2192 Newer(x, y)))) ::: Definition of newest.\n\u2203x (Vehicle(x) \u2227 \u2200y (Vehicle(y) \u2192 x = y \u2228 Newer(x, y) \u2228 Newer(y, x))) ::: All vehicles are comparable in age.\n\u2203x Oldest(x) ::: There exists an oldest vehicle.\n\u2203x Newest(x) ::: There exists a newest vehicle.\nNewer(sedan, convertible) \u2227 Newer(sedan, truck) \u2227 \u00acNewer(sedan, bus) \u2227 \u00acNewer(sedan, motorcyle) ::: The sedan is the second-oldest (implied by context).\nConclusion:\nNewest(convertible) ::: Option A\nNewest(truck) ::: Option B\nNewest(bus) ::: Option C\nNewest(sedan) ::: Option D\nNewest(motorcyle) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Convertible, Truck, Bus, Sedan, Motorcycle])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\n# Constraints\nNewer(Bus, Truck) ::: The bus is newer than the truck.\nNewer(Truck, Convertible) ::: The truck is newer than the convertible.\nNewer(Motorcycle, Bus) ::: The motorcycle is newer than the bus.\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: \"Newer\" is asymmetric.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: \"Newer\" is transitive.\nExists([x:Vehicle], And(Not(Newer(x, Convertible)), Not(Newer(x, Truck)), Not(Newer(x, Bus)), Not(Newer(x, Sedan)), Not(Newer(x, Motorcycle)))) ::: There exists an oldest vehicle.\nExists([x:Vehicle], And(Not(Newer(Convertible, x)), Not(Newer(Truck, x)), Not(Newer(Bus, x)), Not(Newer(Sedan, x)), Not(Newer(Motorcycle, x)))) ::: There exists a newest vehicle.\nForAll([x:Vehicle, y:Vehicle], Or(x == y, Newer(x, y), Newer(y, x))) ::: All vehicles are comparable in age.\nAnd(Newer(Sedan, Convertible), Newer(Sedan, Truck), Not(Newer(Sedan, Bus)), Not(Newer(Sedan, Motorcycle))) ::: The sedan is the second-oldest.\n# Options\nis_valid(ForAll([x:Vehicle], Not(Newer(x, Convertible)))) ::: A) The convertible is the newest.\nis_valid(ForAll([x:Vehicle], Not(Newer(x, Truck)))) ::: B) The truck is the newest.\nis_valid(ForAll([x:Vehicle], Not(Newer(x, Bus)))) ::: C) The bus is the newest.\nis_valid(ForAll([x:Vehicle], Not(Newer(x, Sedan)))) ::: D) The sedan is the newest.\nis_valid(ForAll([x:Vehicle], Not(Newer(x, Motorcycle)))) ::: E) The motorcycle is the newest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(truck,       True)         ::: The truck.\nVehicle(bus,         True)         ::: The bus.\nVehicle(sedan,       True)         ::: The sedan.\nVehicle(motorcyle,   True)         ::: The motorcyle.\nNewer(bus, truck,    True)         ::: The bus is newer than the truck.\nNewer(truck, convertible, True)    ::: The truck is newer than the convertible.\nNewer(motorcyle, bus, True)        ::: The motorcyle is newer than the bus.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($a, $c, True) && Older($a, $d, True) && Older($a, $e, True) >>> Oldest($a, True) ::: A vehicle older than all others is the oldest.\nNewer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) >>> Newest($a, True) ::: A vehicle newer than all others is the newest.\nQuery:\nNewest(convertible, True)  ::: Option A\nNewest(truck,       True)  ::: Option B\nNewest(bus,         True)  ::: Option C\nNewest(sedan,       True)  ::: Option D\nNewest(motorcyle,   True)  ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nNewest(x) ::: Vehicle x is the newest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(truck) ::: The truck.\nVehicle(bus) ::: The bus.\nVehicle(sedan) ::: The sedan.\nVehicle(motorcyle) ::: The motorcyle.\nNewer(bus, truck) ::: The bus is newer than the truck.\nNewer(truck, convertible) ::: The truck is newer than the convertible.\nNewer(motorcyle, bus) ::: The motorcyle is newer than the bus.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: \"Newer\" is asymmetric.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: \"Newer\" is transitive.\n\u2200x (Oldest(x) \u2194 (Vehicle(x) \u2227 \u2200y (Vehicle(y) \u2227 y \u2260 x \u2192 Newer(y, x)))) ::: Definition of oldest.\n\u2200x (Newest(x) \u2194 (Vehicle(x) \u2227 \u2200y (Vehicle(y) \u2227 y \u2260 x \u2192 Newer(x, y)))) ::: Definition of newest.\n\u2203x (Vehicle(x) \u2227 \u2200y (Vehicle(y) \u2192 x = y \u2228 Newer(x, y) \u2228 Newer(y, x))) ::: All vehicles are comparable in age.\n\u2203x Oldest(x) ::: There exists an oldest vehicle.\n\u2203x Newest(x) ::: There exists a newest vehicle.\nNewer(sedan, convertible) \u2227 Newer(sedan, truck) \u2227 \u00acNewer(sedan, bus) \u2227 \u00acNewer(sedan, motorcyle) ::: The sedan is the second-oldest (implied by context).\nConclusion:\nNewest(convertible) ::: Option A\nNewest(truck) ::: Option B\nNewest(bus) ::: Option C\nNewest(sedan) ::: Option D\nNewest(motorcyle) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Convertible, Truck, Bus, Sedan, Motorcycle])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\n# Constraints\nNewer(Bus, Truck) ::: The bus is newer than the truck.\nNewer(Truck, Convertible) ::: The truck is newer than the convertible.\nNewer(Motorcycle, Bus) ::: The motorcycle is newer than the bus.\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: \"Newer\" is asymmetric.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: \"Newer\" is transitive.\nExists([x:Vehicle], And(Not(Newer(x, Convertible)), Not(Newer(x, Truck)), Not(Newer(x, Bus)), Not(Newer(x, Sedan)), Not(Newer(x, Motorcycle)))) ::: There exists an oldest vehicle.\nExists([x:Vehicle], And(Not(Newer(Convertible, x)), Not(Newer(Truck, x)), Not(Newer(Bus, x)), Not(Newer(Sedan, x)), Not(Newer(Motorcycle, x)))) ::: There exists a newest vehicle.\nForAll([x:Vehicle, y:Vehicle], Or(x == y, Newer(x, y), Newer(y, x))) ::: All vehicles are comparable in age.\nAnd(Newer(Sedan, Convertible), Newer(Sedan, Truck), Not(Newer(Sedan, Bus)), Not(Newer(Sedan, Motorcycle))) ::: The sedan is the second-oldest.\n# Options\nis_valid(ForAll([x:Vehicle], Not(Newer(x, Convertible)))) ::: A) The convertible is the newest.\nis_valid(ForAll([x:Vehicle], Not(Newer(x, Truck)))) ::: B) The truck is the newest.\nis_valid(ForAll([x:Vehicle], Not(Newer(x, Bus)))) ::: C) The bus is the newest.\nis_valid(ForAll([x:Vehicle], Not(Newer(x, Sedan)))) ::: D) The sedan is the newest.\nis_valid(ForAll([x:Vehicle], Not(Newer(x, Motorcycle)))) ::: E) The motorcycle is the newest."
            }
        ]
    },
    {
        "id": "logical_deduction_12",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn a golf tournament, there were five golfers: Eve, Rob, Ana, Eli, and Mya. Eli finished below Mya. Eve finished first. Ana finished below Eli. Rob finished second.",
        "question": "Which of the following is true?",
        "options": [
            "A) Eve finished third.",
            "B) Rob finished third.",
            "C) Ana finished third.",
            "D) Eli finished third.",
            "E) Mya finished third."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nGolfer($x, bool)                  ::: $x is one of the five golfers.\nFinishedBelow($x, $y, bool)       ::: Golfer $x finished below golfer $y.\nFinishedAbove($x, $y, bool)       ::: Golfer $x finished above golfer $y.\nFinishedAt($x, $n, bool)          ::: Golfer $x finished at position $n (1 is first).\nFacts:\nGolfer(Eve, True)                 ::: Eve is one of the golfers.\nGolfer(Rob, True)                 ::: Rob is one of the golfers.\nGolfer(Ana, True)                 ::: Ana is one of the golfers.\nGolfer(Eli, True)                 ::: Eli is one of the golfers.\nGolfer(Mya, True)                 ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya, True)     ::: Eli finished below Mya.\nFinishedAt(Eve, 1, True)          ::: Eve finished first.\nFinishedBelow(Ana, Eli, True)     ::: Ana finished below Eli.\nFinishedAt(Rob, 2, True)          ::: Rob finished second.\nRules:\nFinishedBelow($a, $b, True) >>> FinishedAbove($b, $a, True) ::: If $a finished below $b, then $b finished above $a.\nFinishedAbove($a, $b, True) >>> FinishedBelow($b, $a, True) ::: If $a finished above $b, then $b finished below $a.\nFinishedAt($a, $n, True) && FinishedAt($b, $m, True) && $n < $m >>> FinishedAbove($a, $b, True) ::: If $a finished at a lower position number than $b, then $a finished above $b.\nFinishedAt($a, $n, True) && FinishedAt($b, $m, True) && $n > $m >>> FinishedBelow($a, $b, True) ::: If $a finished at a higher position number than $b, then $a finished below $b.\nFinishedAbove($a, $b, True) && FinishedAbove($b, $c, True) >>> FinishedAbove($a, $c, True) ::: FinishedAbove is transitive.\nFinishedBelow($a, $b, True) && FinishedBelow($b, $c, True) >>> FinishedBelow($a, $c, True) ::: FinishedBelow is transitive.\nQuery:\nFinishedAt(Eve, 3, True)  ::: Option A\nFinishedAt(Rob, 3, True)  ::: Option B\nFinishedAt(Ana, 3, True)  ::: Option C\nFinishedAt(Eli, 3, True)  ::: Option D\nFinishedAt(Mya, 3, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedAbove(x, y) ::: Golfer x finished above golfer y.\nFinishedAt(x, n) ::: Golfer x finished at position n (1 is first).\nPremises:\nGolfer(Eve) ::: Eve is one of the golfers.\nGolfer(Rob) ::: Rob is one of the golfers.\nGolfer(Ana) ::: Ana is one of the golfers.\nGolfer(Eli) ::: Eli is one of the golfers.\nGolfer(Mya) ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya) ::: Eli finished below Mya.\nFinishedAt(Eve, 1) ::: Eve finished first.\nFinishedBelow(Ana, Eli) ::: Ana finished below Eli.\nFinishedAt(Rob, 2) ::: Rob finished second.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 FinishedAbove(y, x)) ::: If x finished below y, then y finished above x.\n\u2200x \u2200y (FinishedAbove(x, y) \u2192 FinishedBelow(y, x)) ::: If x finished above y, then y finished below x.\n\u2200x \u2200y \u2200n \u2200m (FinishedAt(x, n) \u2227 FinishedAt(y, m) \u2227 (n < m) \u2192 FinishedAbove(x, y)) ::: If x finished at a lower position number than y, then x finished above y.\n\u2200x \u2200y \u2200n \u2200m (FinishedAt(x, n) \u2227 FinishedAt(y, m) \u2227 (n > m) \u2192 FinishedBelow(x, y)) ::: If x finished at a higher position number than y, then x finished below y.\n\u2200x \u2200y \u2200z (FinishedAbove(x, y) \u2227 FinishedAbove(y, z) \u2192 FinishedAbove(x, z)) ::: FinishedAbove is transitive.\n\u2200x \u2200y \u2200z (FinishedBelow(x, y) \u2227 FinishedBelow(y, z) \u2192 FinishedBelow(x, z)) ::: FinishedBelow is transitive.\n\u2200x \u2200n \u2200m (FinishedAt(x, n) \u2227 FinishedAt(x, m) \u2192 (n = m)) ::: One position per golfer.\n\u2200n \u2200x \u2200y (FinishedAt(x, n) \u2227 FinishedAt(y, n) \u2192 (x = y)) ::: One golfer per position.\nConclusion:\nFinishedAt(Eve, 3) ::: Option A\nFinishedAt(Rob, 3) ::: Option B\nFinishedAt(Ana, 3) ::: Option C\nFinishedAt(Eli, 3) ::: Option D\nFinishedAt(Mya, 3) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nGolfers = EnumSort([Eve, Rob, Ana, Eli, Mya])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([Golfers] -> [positions])\n# Constraints\nDistinct([g:Golfers], pos(g)) ::: Each golfer occupies a unique position\npos(Eve) == 1 ::: Eve finished first.\npos(Rob) == 2 ::: Rob finished second.\npos(Eli) > pos(Mya) ::: Eli finished below Mya.\npos(Ana) > pos(Eli) ::: Ana finished below Eli.\n# Options\nis_valid(pos(Eve) == 3) ::: A) Eve finished third.\nis_valid(pos(Rob) == 3) ::: B) Rob finished third.\nis_valid(pos(Ana) == 3) ::: C) Ana finished third.\nis_valid(pos(Eli) == 3) ::: D) Eli finished third.\nis_valid(pos(Mya) == 3) ::: E) Mya finished third."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nGolfer($x, bool)                  ::: $x is one of the five golfers.\nFinishedBelow($x, $y, bool)       ::: Golfer $x finished below golfer $y.\nFinishedAbove($x, $y, bool)       ::: Golfer $x finished above golfer $y.\nFinishedAt($x, $n, bool)          ::: Golfer $x finished at position $n (1 is first).\nFacts:\nGolfer(Eve, True)                 ::: Eve is one of the golfers.\nGolfer(Rob, True)                 ::: Rob is one of the golfers.\nGolfer(Ana, True)                 ::: Ana is one of the golfers.\nGolfer(Eli, True)                 ::: Eli is one of the golfers.\nGolfer(Mya, True)                 ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya, True)     ::: Eli finished below Mya.\nFinishedAt(Eve, 1, True)          ::: Eve finished first.\nFinishedBelow(Ana, Eli, True)     ::: Ana finished below Eli.\nFinishedAt(Rob, 2, True)          ::: Rob finished second.\nRules:\nFinishedBelow($a, $b, True) >>> FinishedAbove($b, $a, True) ::: If $a finished below $b, then $b finished above $a.\nFinishedAbove($a, $b, True) >>> FinishedBelow($b, $a, True) ::: If $a finished above $b, then $b finished below $a.\nFinishedAt($a, $n, True) && FinishedAt($b, $m, True) && $n < $m >>> FinishedAbove($a, $b, True) ::: If $a finished at a lower position number than $b, then $a finished above $b.\nFinishedAt($a, $n, True) && FinishedAt($b, $m, True) && $n > $m >>> FinishedBelow($a, $b, True) ::: If $a finished at a higher position number than $b, then $a finished below $b.\nFinishedAbove($a, $b, True) && FinishedAbove($b, $c, True) >>> FinishedAbove($a, $c, True) ::: FinishedAbove is transitive.\nFinishedBelow($a, $b, True) && FinishedBelow($b, $c, True) >>> FinishedBelow($a, $c, True) ::: FinishedBelow is transitive.\nQuery:\nFinishedAt(Eve, 3, True)  ::: Option A\nFinishedAt(Rob, 3, True)  ::: Option B\nFinishedAt(Ana, 3, True)  ::: Option C\nFinishedAt(Eli, 3, True)  ::: Option D\nFinishedAt(Mya, 3, True)  ::: Option E",
                "FOL": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedAbove(x, y) ::: Golfer x finished above golfer y.\nFinishedAt(x, n) ::: Golfer x finished at position n (1 is first).\nPremises:\nGolfer(Eve) ::: Eve is one of the golfers.\nGolfer(Rob) ::: Rob is one of the golfers.\nGolfer(Ana) ::: Ana is one of the golfers.\nGolfer(Eli) ::: Eli is one of the golfers.\nGolfer(Mya) ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya) ::: Eli finished below Mya.\nFinishedAt(Eve, 1) ::: Eve finished first.\nFinishedBelow(Ana, Eli) ::: Ana finished below Eli.\nFinishedAt(Rob, 2) ::: Rob finished second.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 FinishedAbove(y, x)) ::: If x finished below y, then y finished above x.\n\u2200x \u2200y (FinishedAbove(x, y) \u2192 FinishedBelow(y, x)) ::: If x finished above y, then y finished below x.\n\u2200x \u2200y \u2200n \u2200m (FinishedAt(x, n) \u2227 FinishedAt(y, m) \u2227 (n < m) \u2192 FinishedAbove(x, y)) ::: If x finished at a lower position number than y, then x finished above y.\n\u2200x \u2200y \u2200n \u2200m (FinishedAt(x, n) \u2227 FinishedAt(y, m) \u2227 (n > m) \u2192 FinishedBelow(x, y)) ::: If x finished at a higher position number than y, then x finished below y.\n\u2200x \u2200y \u2200z (FinishedAbove(x, y) \u2227 FinishedAbove(y, z) \u2192 FinishedAbove(x, z)) ::: FinishedAbove is transitive.\n\u2200x \u2200y \u2200z (FinishedBelow(x, y) \u2227 FinishedBelow(y, z) \u2192 FinishedBelow(x, z)) ::: FinishedBelow is transitive.\n\u2200x \u2200n \u2200m (FinishedAt(x, n) \u2227 FinishedAt(x, m) \u2192 (n = m)) ::: One position per golfer.\n\u2200n \u2200x \u2200y (FinishedAt(x, n) \u2227 FinishedAt(y, n) \u2192 (x = y)) ::: One golfer per position.\nConclusion:\nFinishedAt(Eve, 3) ::: Option A\nFinishedAt(Rob, 3) ::: Option B\nFinishedAt(Ana, 3) ::: Option C\nFinishedAt(Eli, 3) ::: Option D\nFinishedAt(Mya, 3) ::: Option E",
                "SAT": "# Declarations\nGolfers = EnumSort([Eve, Rob, Ana, Eli, Mya])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([Golfers] -> [positions])\n# Constraints\nDistinct([g:Golfers], pos(g)) ::: Each golfer occupies a unique position\npos(Eve) == 1 ::: Eve finished first.\npos(Rob) == 2 ::: Rob finished second.\npos(Eli) > pos(Mya) ::: Eli finished below Mya.\npos(Ana) > pos(Eli) ::: Ana finished below Eli.\n# Options\nis_valid(pos(Eve) == 3) ::: A) Eve finished third.\nis_valid(pos(Rob) == 3) ::: B) Rob finished third.\nis_valid(pos(Ana) == 3) ::: C) Ana finished third.\nis_valid(pos(Eli) == 3) ::: D) Eli finished third.\nis_valid(pos(Mya) == 3) ::: E) Mya finished third."
            }
        ]
    },
    {
        "id": "logical_deduction_13",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: apples, mangoes, oranges, plums, and pears. The oranges are more expensive than the mangoes. The plums are the cheapest. The apples are less expensive than the mangoes. The pears are more expensive than the oranges.",
        "question": "Which of the following is true?",
        "options": [
            "A) The apples are the cheapest.",
            "B) The mangoes are the cheapest.",
            "C) The oranges are the cheapest.",
            "D) The plums are the cheapest.",
            "E) The pears are the cheapest."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is more expensive than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest among the five fruits.\nFacts:\nFruit(apples,  True)             ::: Apples.\nFruit(mangoes, True)             ::: Mangoes.\nFruit(oranges, True)             ::: Oranges.\nFruit(plums,   True)             ::: Plums.\nFruit(pears,   True)             ::: Pears.\nMoreExpensive(oranges, mangoes, True) ::: The oranges are more expensive than the mangoes.\nCheapest(plums, True)            ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples, True) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges, True) ::: The pears are more expensive than the oranges.\nRules:\nMoreExpensive($a, $b, True) >>> MoreExpensive($b, $a, False) ::: If $a is more expensive than $b, then $b is not more expensive than $a.\nCheapest($x, True) >>> MoreExpensive($x, $y, False) && MoreExpensive($y, $x, True) ::: If $x is the cheapest, then $x is not more expensive than any other fruit, and any other fruit is more expensive than $x.\nQuery:\nCheapest(apples,  True)  ::: Option A\nCheapest(mangoes, True)  ::: Option B\nCheapest(oranges, True)  ::: Option C\nCheapest(plums,   True)  ::: Option D\nCheapest(pears,   True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nMoreExpensive(x, y) ::: Fruit x is more expensive than fruit y.\nCheapest(x) ::: Fruit x is the cheapest among the five fruits.\nPremises:\nFruit(apples) ::: Apples.\nFruit(mangoes) ::: Mangoes.\nFruit(oranges) ::: Oranges.\nFruit(plums) ::: Plums.\nFruit(pears) ::: Pears.\nMoreExpensive(oranges, mangoes) ::: The oranges are more expensive than the mangoes.\nCheapest(plums) ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges) ::: The pears are more expensive than the oranges.\n\u2200x \u2200y (MoreExpensive(x, y) \u2192 \u00acMoreExpensive(y, x)) ::: \"MoreExpensive\" is asymmetric.\n\u2200x (Cheapest(x) \u2192 (\u2200y (x \u2260 y \u2192 MoreExpensive(y, x)))) ::: If x is the cheapest, then all other fruits are more expensive than x.\nConclusion:\nCheapest(apples) ::: Option A\nCheapest(mangoes) ::: Option B\nCheapest(oranges) ::: Option C\nCheapest(plums) ::: Option D\nCheapest(pears) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nFruit = EnumSort([Apples, Mangoes, Oranges, Plums, Pears])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nForAll([x:Fruit, y:Fruit], Implies(price(x) > price(y), Not(price(y) > price(x)))) ::: \"MoreExpensive\" is asymmetric\nprice(Oranges) > price(Mangoes) ::: The oranges are more expensive than the mangoes.\nprice(Plums) == 0 ::: The plums are the cheapest (assign lowest price).\nForAll([x:Fruit], Implies(x != Plums, price(x) > price(Plums))) ::: All other fruits are more expensive than plums.\nprice(Mangoes) > price(Apples) ::: The apples are less expensive than the mangoes.\nprice(Pears) > price(Oranges) ::: The pears are more expensive than the oranges.\n# Options\nis_valid(price(Apples) == 0) ::: A) The apples are the cheapest.\nis_valid(price(Mangoes) == 0) ::: B) The mangoes are the cheapest.\nis_valid(price(Oranges) == 0) ::: C) The oranges are the cheapest.\nis_valid(price(Plums) == 0) ::: D) The plums are the cheapest.\nis_valid(price(Pears) == 0) ::: E) The pears are the cheapest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is more expensive than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest among the five fruits.\nFacts:\nFruit(apples,  True)             ::: Apples.\nFruit(mangoes, True)             ::: Mangoes.\nFruit(oranges, True)             ::: Oranges.\nFruit(plums,   True)             ::: Plums.\nFruit(pears,   True)             ::: Pears.\nMoreExpensive(oranges, mangoes, True) ::: The oranges are more expensive than the mangoes.\nCheapest(plums, True)            ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples, True) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges, True) ::: The pears are more expensive than the oranges.\nRules:\nMoreExpensive($a, $b, True) >>> MoreExpensive($b, $a, False) ::: If $a is more expensive than $b, then $b is not more expensive than $a.\nCheapest($x, True) >>> MoreExpensive($x, $y, False) && MoreExpensive($y, $x, True) ::: If $x is the cheapest, then $x is not more expensive than any other fruit, and any other fruit is more expensive than $x.\nQuery:\nCheapest(apples,  True)  ::: Option A\nCheapest(mangoes, True)  ::: Option B\nCheapest(oranges, True)  ::: Option C\nCheapest(plums,   True)  ::: Option D\nCheapest(pears,   True)  ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nMoreExpensive(x, y) ::: Fruit x is more expensive than fruit y.\nCheapest(x) ::: Fruit x is the cheapest among the five fruits.\nPremises:\nFruit(apples) ::: Apples.\nFruit(mangoes) ::: Mangoes.\nFruit(oranges) ::: Oranges.\nFruit(plums) ::: Plums.\nFruit(pears) ::: Pears.\nMoreExpensive(oranges, mangoes) ::: The oranges are more expensive than the mangoes.\nCheapest(plums) ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges) ::: The pears are more expensive than the oranges.\n\u2200x \u2200y (MoreExpensive(x, y) \u2192 \u00acMoreExpensive(y, x)) ::: \"MoreExpensive\" is asymmetric.\n\u2200x (Cheapest(x) \u2192 (\u2200y (x \u2260 y \u2192 MoreExpensive(y, x)))) ::: If x is the cheapest, then all other fruits are more expensive than x.\nConclusion:\nCheapest(apples) ::: Option A\nCheapest(mangoes) ::: Option B\nCheapest(oranges) ::: Option C\nCheapest(plums) ::: Option D\nCheapest(pears) ::: Option E",
                "SAT": "# Declarations\nFruit = EnumSort([Apples, Mangoes, Oranges, Plums, Pears])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nForAll([x:Fruit, y:Fruit], Implies(price(x) > price(y), Not(price(y) > price(x)))) ::: \"MoreExpensive\" is asymmetric\nprice(Oranges) > price(Mangoes) ::: The oranges are more expensive than the mangoes.\nprice(Plums) == 0 ::: The plums are the cheapest (assign lowest price).\nForAll([x:Fruit], Implies(x != Plums, price(x) > price(Plums))) ::: All other fruits are more expensive than plums.\nprice(Mangoes) > price(Apples) ::: The apples are less expensive than the mangoes.\nprice(Pears) > price(Oranges) ::: The pears are more expensive than the oranges.\n# Options\nis_valid(price(Apples) == 0) ::: A) The apples are the cheapest.\nis_valid(price(Mangoes) == 0) ::: B) The mangoes are the cheapest.\nis_valid(price(Oranges) == 0) ::: C) The oranges are the cheapest.\nis_valid(price(Plums) == 0) ::: D) The plums are the cheapest.\nis_valid(price(Pears) == 0) ::: E) The pears are the cheapest."
            }
        ]
    },
    {
        "id": "logical_deduction_14",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: mangoes, kiwis, plums, pears, and watermelons. The kiwis are less expensive than the plums. The pears are the third-most expensive. The kiwis are the second-cheapest. The watermelons are the most expensive.",
        "question": "Which of the following is true?",
        "options": [
            "A) The mangoes are the third-most expensive.",
            "B) The kiwis are the third-most expensive.",
            "C) The plums are the third-most expensive.",
            "D) The pears are the third-most expensive.",
            "E) The watermelons are the third-most expensive."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nExpensiveRank($x, $n, bool)      ::: Fruit $x is the nth most expensive (1 being most expensive).\nFacts:\nFruit(mangoes, True)             ::: The mangoes.\nFruit(kiwis, True)               ::: The kiwis.\nFruit(plums, True)               ::: The plums.\nFruit(pears, True)               ::: The pears.\nFruit(watermelons, True)         ::: The watermelons.\nCheaper(kiwis, plums, True)      ::: The kiwis are less expensive than the plums.\nExpensiveRank(pears, 3, True)   ::: The pears are the third-most expensive.\nExpensiveRank(kiwis, 4, True)   ::: The kiwis are the second-cheapest (i.e., fourth most expensive).\nExpensiveRank(watermelons, 1, True) ::: The watermelons are the most expensive.\nRules:\nCheaper($a, $b, True) >>> ExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n > $m ::: If $a is cheaper than $b, then $a's rank is higher (less expensive) than $b's.\nExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n < $m >>> Cheaper($b, $a, True) ::: If $a's rank is lower (more expensive) than $b's, then $b is cheaper than $a.\nQuery:\nExpensiveRank(mangoes, 3, True)  ::: Option A\nExpensiveRank(kiwis, 3, True)    ::: Option B\nExpensiveRank(plums, 3, True)    ::: Option C\nExpensiveRank(pears, 3, True)    ::: Option D\nExpensiveRank(watermelons, 3, True) ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nRank(fruit, pos) ::: fruit has price position pos, where pos \u2208 {one,two,three,four,five}; one = most expensive, five = cheapest.\nCheaper(x, y) ::: x is cheaper (less expensive) than y.\nPremises:\nRank(watermelon, one) ::: Watermelons are the most expensive.\nRank(pears, three) ::: Pears are the third-most expensive.\nRank(kiwis, four) ::: Kiwis are the second-cheapest.\nCheaper(kiwis, plums) ::: Kiwis are cheaper than plums.\n\u2200F \u2200P \u2200Q ((Rank(F,P) \u2227 Rank(F,Q)) \u2192 (P = Q)) ::: One rank per fruit.\n\u2200P \u2200F \u2200G ((Rank(F,P) \u2227 Rank(G,P)) \u2192 (F = G)) ::: One fruit per rank.\nRank(mangoes, one) \u2228 Rank(mangoes, two) \u2228 Rank(mangoes, three) \u2228 Rank(mangoes, four) \u2228 Rank(mangoes, five) ::: Mangoes occupy some rank.\nRank(plums, one) \u2228 Rank(plums, two) \u2228 Rank(plums, three) \u2228 Rank(plums, four) \u2228 Rank(plums, five) ::: Plums occupy some rank.\n\u2200X \u2200Y (Cheaper(X, Y) \u2194 (Rank(X, P) \u2227 Rank(Y, Q) \u2227 (P > Q))) ::: \"Cheaper\" is defined by rank comparison.\n\u2200X \u2200Y (Cheaper(X, Y) \u2192 \u00acCheaper(Y, X)) ::: \"Cheaper\" is asymmetric.\nConclusion:\nRank(mangoes, three) ::: Option A.\nRank(kiwis, three) ::: Option B.\nRank(plums, three) ::: Option C.\nRank(pears, three) ::: Option D.\nRank(watermelon, three) ::: Option E."
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nfruits = EnumSort([Mangoes, Kiwis, Plums, Pears, Watermelons])\nrank = IntSort([1, 2, 3, 4, 5]) ::: 1 is most expensive, 5 is cheapest\nexpensive_rank = Function([fruits] -> [rank])\n# Constraints\nDistinct([f:fruits], expensive_rank(f)) ::: Each fruit has unique rank\nexpensive_rank(Kiwis) < expensive_rank(Plums) ::: Kiwis are less expensive than plums\nexpensive_rank(Pears) == 3 ::: Pears are third-most expensive\nexpensive_rank(Kiwis) == 4 ::: Kiwis are second-cheapest (fourth most expensive)\nexpensive_rank(Watermelons) == 1 ::: Watermelons are most expensive\n# Options\nis_valid(expensive_rank(Mangoes) == 3) ::: A) The mangoes are the third-most expensive.\nis_valid(expensive_rank(Kiwis) == 3) ::: B) The kiwis are the third-most expensive.\nis_valid(expensive_rank(Plums) == 3) ::: C) The plums are the third-most expensive.\nis_valid(expensive_rank(Pears) == 3) ::: D) The pears are the third-most expensive.\nis_valid(expensive_rank(Watermelons) == 3) ::: E) The watermelons are the third-most expensive."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nExpensiveRank($x, $n, bool)      ::: Fruit $x is the nth most expensive (1 being most expensive).\nFacts:\nFruit(mangoes, True)             ::: The mangoes.\nFruit(kiwis, True)               ::: The kiwis.\nFruit(plums, True)               ::: The plums.\nFruit(pears, True)               ::: The pears.\nFruit(watermelons, True)         ::: The watermelons.\nCheaper(kiwis, plums, True)      ::: The kiwis are less expensive than the plums.\nExpensiveRank(pears, 3, True)   ::: The pears are the third-most expensive.\nExpensiveRank(kiwis, 4, True)   ::: The kiwis are the second-cheapest (i.e., fourth most expensive).\nExpensiveRank(watermelons, 1, True) ::: The watermelons are the most expensive.\nRules:\nCheaper($a, $b, True) >>> ExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n > $m ::: If $a is cheaper than $b, then $a's rank is higher (less expensive) than $b's.\nExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n < $m >>> Cheaper($b, $a, True) ::: If $a's rank is lower (more expensive) than $b's, then $b is cheaper than $a.\nQuery:\nExpensiveRank(mangoes, 3, True)  ::: Option A\nExpensiveRank(kiwis, 3, True)    ::: Option B\nExpensiveRank(plums, 3, True)    ::: Option C\nExpensiveRank(pears, 3, True)    ::: Option D\nExpensiveRank(watermelons, 3, True) ::: Option E",
                "FOL": "Predicates:\nRank(fruit, pos) ::: fruit has price position pos, where pos \u2208 {one,two,three,four,five}; one = most expensive, five = cheapest.\nCheaper(x, y) ::: x is cheaper (less expensive) than y.\nPremises:\nRank(watermelon, one) ::: Watermelons are the most expensive.\nRank(pears, three) ::: Pears are the third-most expensive.\nRank(kiwis, four) ::: Kiwis are the second-cheapest.\nCheaper(kiwis, plums) ::: Kiwis are cheaper than plums.\n\u2200F \u2200P \u2200Q ((Rank(F,P) \u2227 Rank(F,Q)) \u2192 (P = Q)) ::: One rank per fruit.\n\u2200P \u2200F \u2200G ((Rank(F,P) \u2227 Rank(G,P)) \u2192 (F = G)) ::: One fruit per rank.\nRank(mangoes, one) \u2228 Rank(mangoes, two) \u2228 Rank(mangoes, three) \u2228 Rank(mangoes, four) \u2228 Rank(mangoes, five) ::: Mangoes occupy some rank.\nRank(plums, one) \u2228 Rank(plums, two) \u2228 Rank(plums, three) \u2228 Rank(plums, four) \u2228 Rank(plums, five) ::: Plums occupy some rank.\n\u2200X \u2200Y (Cheaper(X, Y) \u2194 (Rank(X, P) \u2227 Rank(Y, Q) \u2227 (P > Q))) ::: \"Cheaper\" is defined by rank comparison.\n\u2200X \u2200Y (Cheaper(X, Y) \u2192 \u00acCheaper(Y, X)) ::: \"Cheaper\" is asymmetric.\nConclusion:\nRank(mangoes, three) ::: Option A.\nRank(kiwis, three) ::: Option B.\nRank(plums, three) ::: Option C.\nRank(pears, three) ::: Option D.\nRank(watermelon, three) ::: Option E.",
                "SAT": "# Declarations\nfruits = EnumSort([Mangoes, Kiwis, Plums, Pears, Watermelons])\nrank = IntSort([1, 2, 3, 4, 5]) ::: 1 is most expensive, 5 is cheapest\nexpensive_rank = Function([fruits] -> [rank])\n# Constraints\nDistinct([f:fruits], expensive_rank(f)) ::: Each fruit has unique rank\nexpensive_rank(Kiwis) < expensive_rank(Plums) ::: Kiwis are less expensive than plums\nexpensive_rank(Pears) == 3 ::: Pears are third-most expensive\nexpensive_rank(Kiwis) == 4 ::: Kiwis are second-cheapest (fourth most expensive)\nexpensive_rank(Watermelons) == 1 ::: Watermelons are most expensive\n# Options\nis_valid(expensive_rank(Mangoes) == 3) ::: A) The mangoes are the third-most expensive.\nis_valid(expensive_rank(Kiwis) == 3) ::: B) The kiwis are the third-most expensive.\nis_valid(expensive_rank(Plums) == 3) ::: C) The plums are the third-most expensive.\nis_valid(expensive_rank(Pears) == 3) ::: D) The pears are the third-most expensive.\nis_valid(expensive_rank(Watermelons) == 3) ::: E) The watermelons are the third-most expensive."
            }
        ]
    },
    {
        "id": "logical_deduction_15",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a green book, an orange book, a gray book, a yellow book, and a purple book. The green book is the rightmost. The gray book is to the right of the orange book. The purple book is to the left of the yellow book. The purple book is to the right of the gray book.",
        "question": "Which of the following is true?",
        "options": [
            "A) The green book is the second from the left.",
            "B) The orange book is the second from the left.",
            "C) The gray book is the second from the left.",
            "D) The yellow book is the second from the left.",
            "E) The purple book is the second from the left."
        ],
        "answer": "C",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(orange, True)              ::: The orange book.\nBook(gray,   True)              ::: The gray book.\nBook(yellow, True)              ::: The yellow book.\nBook(purple, True)              ::: The purple book.\nRightMost(green, True)          ::: The green book is the rightmost.\nRightOf(gray, orange, True)     ::: The gray book is to the right of the orange book.\nLeftOf(purple, yellow, True)   ::: The purple book is to the left of the yellow book.\nRightOf(purple, gray, True)     ::: The purple book is to the right of the gray book.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left\u2011of is transitive.\nLeftOf($a, green, True) && LeftOf($b, green, True) && LeftOf($c, green, True) && LeftOf($d, green, True) >>> RightMost(green, True) ::: A book that is to the left of all the other four is the right\u2011most book (green is rightmost).\nLeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) && LeftOf($d, green, True) >>> SecondFromLeft($b, True) ::: The book immediately right of the leftmost\u2014and still left of the remaining three\u2014is second from the left.\nQuery:\nSecondFromLeft(green,  True)  ::: Option A\nSecondFromLeft(orange, True)  ::: Option B\nSecondFromLeft(gray,   True)  ::: Option C\nSecondFromLeft(yellow, True)  ::: Option D\nSecondFromLeft(purple, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nRightMost(x) ::: Book x is the right-most book on the shelf.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nPremises:\nBook(green) ::: The green book.\nBook(orange) ::: The orange book.\nBook(gray) ::: The gray book.\nBook(yellow) ::: The yellow book.\nBook(purple) ::: The purple book.\nRightMost(green) ::: The green book is the rightmost.\nRightOf(gray, orange) ::: The gray book is to the right of the orange book.\nLeftOf(purple, yellow) ::: The purple book is to the left of the yellow book.\nRightOf(purple, gray) ::: The purple book is to the right of the gray book.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: LeftOf and RightOf are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: RightOf is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x (RightMost(x) \u2194 (Book(x) \u2227 \u2200y (Book(y) \u2227 y \u2260 x \u2192 LeftOf(y, x)))) ::: A book is rightmost if all others are left of it.\n\u2200x (SecondFromLeft(x) \u2194 (Book(x) \u2227 \u2203y (Book(y) \u2227 LeftOf(y, x) \u2227 \u2200z (Book(z) \u2227 z \u2260 y \u2227 z \u2260 x \u2192 RightOf(z, y)))) ::: x is second from left if there is exactly one book to its left.\nConclusion:\nSecondFromLeft(green) ::: Option A\nSecondFromLeft(orange) ::: Option B\nSecondFromLeft(gray) ::: Option C\nSecondFromLeft(yellow) ::: Option D\nSecondFromLeft(purple) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Green, Orange, Gray, Yellow, Purple])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Green) == 5 ::: The green book is the rightmost.\npos(Gray) > pos(Orange) ::: The gray book is to the right of the orange book.\npos(Purple) < pos(Yellow) ::: The purple book is to the left of the yellow book.\npos(Purple) > pos(Gray) ::: The purple book is to the right of the gray book.\n# Options\nis_valid(pos(Green) == 2) ::: A) The green book is the second from the left.\nis_valid(pos(Orange) == 2) ::: B) The orange book is the second from the left.\nis_valid(pos(Gray) == 2) ::: C) The gray book is the second from the left.\nis_valid(pos(Yellow) == 2) ::: D) The yellow book is the second from the left.\nis_valid(pos(Purple) == 2) ::: E) The purple book is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(orange, True)              ::: The orange book.\nBook(gray,   True)              ::: The gray book.\nBook(yellow, True)              ::: The yellow book.\nBook(purple, True)              ::: The purple book.\nRightMost(green, True)          ::: The green book is the rightmost.\nRightOf(gray, orange, True)     ::: The gray book is to the right of the orange book.\nLeftOf(purple, yellow, True)   ::: The purple book is to the left of the yellow book.\nRightOf(purple, gray, True)     ::: The purple book is to the right of the gray book.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left\u2011of is transitive.\nLeftOf($a, green, True) && LeftOf($b, green, True) && LeftOf($c, green, True) && LeftOf($d, green, True) >>> RightMost(green, True) ::: A book that is to the left of all the other four is the right\u2011most book (green is rightmost).\nLeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) && LeftOf($d, green, True) >>> SecondFromLeft($b, True) ::: The book immediately right of the leftmost\u2014and still left of the remaining three\u2014is second from the left.\nQuery:\nSecondFromLeft(green,  True)  ::: Option A\nSecondFromLeft(orange, True)  ::: Option B\nSecondFromLeft(gray,   True)  ::: Option C\nSecondFromLeft(yellow, True)  ::: Option D\nSecondFromLeft(purple, True)  ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nRightMost(x) ::: Book x is the right-most book on the shelf.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nPremises:\nBook(green) ::: The green book.\nBook(orange) ::: The orange book.\nBook(gray) ::: The gray book.\nBook(yellow) ::: The yellow book.\nBook(purple) ::: The purple book.\nRightMost(green) ::: The green book is the rightmost.\nRightOf(gray, orange) ::: The gray book is to the right of the orange book.\nLeftOf(purple, yellow) ::: The purple book is to the left of the yellow book.\nRightOf(purple, gray) ::: The purple book is to the right of the gray book.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: LeftOf and RightOf are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: RightOf is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x (RightMost(x) \u2194 (Book(x) \u2227 \u2200y (Book(y) \u2227 y \u2260 x \u2192 LeftOf(y, x)))) ::: A book is rightmost if all others are left of it.\n\u2200x (SecondFromLeft(x) \u2194 (Book(x) \u2227 \u2203y (Book(y) \u2227 LeftOf(y, x) \u2227 \u2200z (Book(z) \u2227 z \u2260 y \u2227 z \u2260 x \u2192 RightOf(z, y)))) ::: x is second from left if there is exactly one book to its left.\nConclusion:\nSecondFromLeft(green) ::: Option A\nSecondFromLeft(orange) ::: Option B\nSecondFromLeft(gray) ::: Option C\nSecondFromLeft(yellow) ::: Option D\nSecondFromLeft(purple) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Green, Orange, Gray, Yellow, Purple])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Green) == 5 ::: The green book is the rightmost.\npos(Gray) > pos(Orange) ::: The gray book is to the right of the orange book.\npos(Purple) < pos(Yellow) ::: The purple book is to the left of the yellow book.\npos(Purple) > pos(Gray) ::: The purple book is to the right of the gray book.\n# Options\nis_valid(pos(Green) == 2) ::: A) The green book is the second from the left.\nis_valid(pos(Orange) == 2) ::: B) The orange book is the second from the left.\nis_valid(pos(Gray) == 2) ::: C) The gray book is the second from the left.\nis_valid(pos(Yellow) == 2) ::: D) The yellow book is the second from the left.\nis_valid(pos(Purple) == 2) ::: E) The purple book is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_16",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: watermelons, oranges, loquats, plums, and kiwis. The plums are less expensive than the kiwis. The plums are more expensive than the watermelons. The loquats are more expensive than the kiwis. The oranges are the most expensive.",
        "question": "Which of the following is true?",
        "options": [
            "A) The watermelons are the second-cheapest.",
            "B) The oranges are the second-cheapest.",
            "C) The loquats are the second-cheapest.",
            "D) The plums are the second-cheapest.",
            "E) The kiwis are the second-cheapest."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is strictly cheaper than fruit $y.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is strictly more expensive than fruit $y.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nSecondCheapest($x, bool)         ::: Fruit $x is the second cheapest.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(oranges, True)             ::: The oranges.\nFruit(loquats, True)             ::: The loquats.\nFruit(plums, True)               ::: The plums.\nFruit(kiwis, True)              ::: The kiwis.\nCheaper(plums, kiwis, True)      ::: The plums are less expensive than the kiwis.\nMoreExpensive(plums, watermelons, True) ::: The plums are more expensive than the watermelons.\nMoreExpensive(loquats, kiwis, True) ::: The loquats are more expensive than the kiwis.\nMostExpensive(oranges, True)    ::: The oranges are the most expensive.\nRules:\nCheaper($a, $b, True) >>> MoreExpensive($b, $a, True) ::: If $a is cheaper than $b, then $b is more expensive than $a.\nMoreExpensive($a, $b, True) >>> Cheaper($b, $a, True) ::: If $a is more expensive than $b, then $b is cheaper than $a.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: More expensive is transitive.\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nMostExpensive($m, True) && Cheaper($m, $x, False) && Cheaper($x, watermelons, True) >>> SecondCheapest($x, True) ::: The fruit that is cheaper than all but one (watermelons) is second cheapest.\nQuery:\nSecondCheapest(watermelons, True)  ::: Option A\nSecondCheapest(oranges, True)      ::: Option B\nSecondCheapest(loquats, True)      ::: Option C\nSecondCheapest(plums, True)        ::: Option D\nSecondCheapest(kiwis, True)       ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: x is cheaper than y.\nMoreExpensive(x, y) ::: x is more expensive than y.\nMostExpensive(x) ::: x is the most expensive.\nSecondCheapest(x) ::: x is the second cheapest.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(oranges) ::: The oranges.\nFruit(loquats) ::: The loquats.\nFruit(plums) ::: The plums.\nFruit(kiwis) ::: The kiwis.\nCheaper(plums, kiwis) ::: The plums are less expensive than the kiwis.\nMoreExpensive(plums, watermelons) ::: The plums are more expensive than the watermelons.\nMoreExpensive(loquats, kiwis) ::: The loquats are more expensive than the kiwis.\nMostExpensive(oranges) ::: The oranges are the most expensive.\n\u2200x \u2200y (Cheaper(x, y) \u2194 MoreExpensive(y, x)) ::: Cheaper and MoreExpensive are inverses.\n\u2200x \u2200y \u2200z (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2192 MoreExpensive(x, z)) ::: MoreExpensive is transitive.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (MostExpensive(x) \u2192 \u2200y (\u00acCheaper(x, y))) ::: The most expensive is not cheaper than any other.\n\u2200x (SecondCheapest(x) \u2194 (\u2203y (Cheaper(y, x) \u2227 \u2200z (\u00acCheaper(z, y) \u2228 z = watermelons))) ::: x is second cheapest if only watermelons are cheaper.\nConclusion:\nSecondCheapest(watermelons) ::: Option A\nSecondCheapest(oranges) ::: Option B\nSecondCheapest(loquats) ::: Option C\nSecondCheapest(plums) ::: Option D\nSecondCheapest(kiwis) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nFruit = EnumSort([Watermelons, Oranges, Loquats, Plums, Kiwis])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nDistinct([f:Fruit], price(f)) ::: Each fruit has a unique price\nprice(Plums) < price(Kiwis) ::: The plums are less expensive than the kiwis.\nprice(Plums) > price(Watermelons) ::: The plums are more expensive than the watermelons.\nprice(Loquats) > price(Kiwis) ::: The loquats are more expensive than the kiwis.\nprice(Oranges) > price(Loquats) ::: The oranges are the most expensive.\nForAll([f:Fruit], Implies(f != Oranges, price(Oranges) > price(f))) ::: Oranges are more expensive than all others\n# Options\nis_valid(price(Watermelons) == 2) ::: A) The watermelons are the second-cheapest.\nis_valid(price(Oranges) == 2) ::: B) The oranges are the second-cheapest.\nis_valid(price(Loquats) == 2) ::: C) The loquats are the second-cheapest.\nis_valid(price(Plums) == 2) ::: D) The plums are the second-cheapest.\nis_valid(price(Kiwis) == 2) ::: E) The kiwis are the second-cheapest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is strictly cheaper than fruit $y.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is strictly more expensive than fruit $y.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nSecondCheapest($x, bool)         ::: Fruit $x is the second cheapest.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(oranges, True)             ::: The oranges.\nFruit(loquats, True)             ::: The loquats.\nFruit(plums, True)               ::: The plums.\nFruit(kiwis, True)              ::: The kiwis.\nCheaper(plums, kiwis, True)      ::: The plums are less expensive than the kiwis.\nMoreExpensive(plums, watermelons, True) ::: The plums are more expensive than the watermelons.\nMoreExpensive(loquats, kiwis, True) ::: The loquats are more expensive than the kiwis.\nMostExpensive(oranges, True)    ::: The oranges are the most expensive.\nRules:\nCheaper($a, $b, True) >>> MoreExpensive($b, $a, True) ::: If $a is cheaper than $b, then $b is more expensive than $a.\nMoreExpensive($a, $b, True) >>> Cheaper($b, $a, True) ::: If $a is more expensive than $b, then $b is cheaper than $a.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: More expensive is transitive.\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nMostExpensive($m, True) && Cheaper($m, $x, False) && Cheaper($x, watermelons, True) >>> SecondCheapest($x, True) ::: The fruit that is cheaper than all but one (watermelons) is second cheapest.\nQuery:\nSecondCheapest(watermelons, True)  ::: Option A\nSecondCheapest(oranges, True)      ::: Option B\nSecondCheapest(loquats, True)      ::: Option C\nSecondCheapest(plums, True)        ::: Option D\nSecondCheapest(kiwis, True)       ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: x is cheaper than y.\nMoreExpensive(x, y) ::: x is more expensive than y.\nMostExpensive(x) ::: x is the most expensive.\nSecondCheapest(x) ::: x is the second cheapest.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(oranges) ::: The oranges.\nFruit(loquats) ::: The loquats.\nFruit(plums) ::: The plums.\nFruit(kiwis) ::: The kiwis.\nCheaper(plums, kiwis) ::: The plums are less expensive than the kiwis.\nMoreExpensive(plums, watermelons) ::: The plums are more expensive than the watermelons.\nMoreExpensive(loquats, kiwis) ::: The loquats are more expensive than the kiwis.\nMostExpensive(oranges) ::: The oranges are the most expensive.\n\u2200x \u2200y (Cheaper(x, y) \u2194 MoreExpensive(y, x)) ::: Cheaper and MoreExpensive are inverses.\n\u2200x \u2200y \u2200z (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2192 MoreExpensive(x, z)) ::: MoreExpensive is transitive.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (MostExpensive(x) \u2192 \u2200y (\u00acCheaper(x, y))) ::: The most expensive is not cheaper than any other.\n\u2200x (SecondCheapest(x) \u2194 (\u2203y (Cheaper(y, x) \u2227 \u2200z (\u00acCheaper(z, y) \u2228 z = watermelons))) ::: x is second cheapest if only watermelons are cheaper.\nConclusion:\nSecondCheapest(watermelons) ::: Option A\nSecondCheapest(oranges) ::: Option B\nSecondCheapest(loquats) ::: Option C\nSecondCheapest(plums) ::: Option D\nSecondCheapest(kiwis) ::: Option E",
                "SAT": "# Declarations\nFruit = EnumSort([Watermelons, Oranges, Loquats, Plums, Kiwis])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nDistinct([f:Fruit], price(f)) ::: Each fruit has a unique price\nprice(Plums) < price(Kiwis) ::: The plums are less expensive than the kiwis.\nprice(Plums) > price(Watermelons) ::: The plums are more expensive than the watermelons.\nprice(Loquats) > price(Kiwis) ::: The loquats are more expensive than the kiwis.\nprice(Oranges) > price(Loquats) ::: The oranges are the most expensive.\nForAll([f:Fruit], Implies(f != Oranges, price(Oranges) > price(f))) ::: Oranges are more expensive than all others\n# Options\nis_valid(price(Watermelons) == 2) ::: A) The watermelons are the second-cheapest.\nis_valid(price(Oranges) == 2) ::: B) The oranges are the second-cheapest.\nis_valid(price(Loquats) == 2) ::: C) The loquats are the second-cheapest.\nis_valid(price(Plums) == 2) ::: D) The plums are the second-cheapest.\nis_valid(price(Kiwis) == 2) ::: E) The kiwis are the second-cheapest."
            }
        ]
    }
]