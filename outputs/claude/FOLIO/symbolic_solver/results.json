[
  {
    "id": "FOLIO_dev_0",
    "context": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Bonnie performs in school talent shows often.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n2 (all x (PerformOften(x) | InactiveDisinterested(x))).  [assumption].\n3 (all x (ChaperoneDances(x) -> -Student(x))).  [assumption].\n4 (all x (InactiveDisinterested(x) -> ChaperoneDances(x))).  [assumption].\n5 (all x (YoungChildTeen(x) -> Student(x))).  [assumption].\n7 PerformOften(Bonnie).  [goal].\n8 PerformOften(x) | InactiveDisinterested(x).  [clausify(2)].\n10 -PerformOften(Bonnie).  [deny(7)].\n11 -InactiveDisinterested(x) | ChaperoneDances(x).  [clausify(4)].\n12 -ChaperoneDances(x) | -Student(x).  [clausify(3)].\n13 YoungChildTeen(Bonnie).  [assumption].\n14 -YoungChildTeen(x) | Student(x).  [clausify(5)].\n18 -InactiveDisinterested(x) | -Student(x).  [resolve(11,b,12,a)].\n19 InactiveDisinterested(Bonnie).  [resolve(10,a,8,a)].\n20 -Student(Bonnie).  [resolve(18,a,19,a)].\n21 Student(Bonnie).  [resolve(13,a,14,a)].\n22 $F.  [resolve(20,a,21,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_1",
    "context": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_2",
    "context": "If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_3",
    "context": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James has lunch in the company.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (ScheduleMeeting(x) -> AppearToday(x))) # label(non_clause). [assumption].\n2 (all x (LunchInCompany(x) -> ScheduleMeeting(x))) # label(non_clause). [assumption].\n3 (all x (Employee(x) -> LunchInCompany(x) | LunchAtHome(x))) # label(non_clause). [assumption].\n4 (all x (LunchAtHome(x) -> WorkRemotely(x))) # label(non_clause). [assumption].\n5 (all x (InOtherCountry(x) -> WorkRemotely(x))) # label(non_clause). [assumption].\n6 (all x (Manager(x) -> -WorkRemotely(x))) # label(non_clause). [assumption].\n7 Manager(James) & AppearToday(James) & -(-Manager(James) & -AppearToday(James)) | -(Manager(James) & AppearToday(James)) & -Manager(James) & -AppearToday(James) # label(non_clause). [assumption].\n8 LunchInCompany(James) # label(non_clause) # label(goal). [goal].\n9 -ScheduleMeeting(x) | AppearToday(x). [clausify(1)].\n10 -LunchInCompany(x) | ScheduleMeeting(x). [clausify(2)].\n11 -Employee(x) | LunchInCompany(x) | LunchAtHome(x). [clausify(3)].\n12 -LunchAtHome(x) | WorkRemotely(x). [clausify(4)].\n13 -InOtherCountry(x) | WorkRemotely(x). [clausify(5)].\n14 -Manager(x) | -WorkRemotely(x). [clausify(6)].\n15 Manager(James) | -AppearToday(James). [clausify(7)].\n16 AppearToday(James) | -Manager(James). [clausify(7)].\n17 -LunchInCompany(James). [deny(8)].\n18 Derived: -LunchInCompany(x) | AppearToday(x). [resolve(10,b,9,a)].\n19 Derived: -AppearToday(James) | -WorkRemotely(James). [resolve(15,a,14,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (ScheduleMeeting(x) -> AppearToday(x))) # label(non_clause). [assumption].\n2 (all x (LunchInCompany(x) -> ScheduleMeeting(x))) # label(non_clause). [assumption].\n3 (all x (Employee(x) -> LunchInCompany(x) | LunchAtHome(x))) # label(non_clause). [assumption].\n4 (all x (LunchAtHome(x) -> WorkRemotely(x))) # label(non_clause). [assumption].\n5 (all x (InOtherCountry(x) -> WorkRemotely(x))) # label(non_clause). [assumption].\n6 (all x (Manager(x) -> -WorkRemotely(x))) # label(non_clause). [assumption].\n7 Manager(James) & AppearToday(James) & -(-Manager(James) & -AppearToday(James)) | -(Manager(James) & AppearToday(James)) & -Manager(James) & -AppearToday(James) # label(non_clause). [assumption].\n8 -LunchInCompany(James) # label(non_clause) # label(goal). [goal].\n9 -ScheduleMeeting(x) | AppearToday(x). [clausify(1)].\n10 -LunchInCompany(x) | ScheduleMeeting(x). [clausify(2)].\n11 -Employee(x) | LunchInCompany(x) | LunchAtHome(x). [clausify(3)].\n12 -LunchAtHome(x) | WorkRemotely(x). [clausify(4)].\n13 -InOtherCountry(x) | WorkRemotely(x). [clausify(5)].\n14 -Manager(x) | -WorkRemotely(x). [clausify(6)].\n15 Manager(James) | -AppearToday(James). [clausify(7)].\n16 AppearToday(James) | -Manager(James). [clausify(7)].\n17 LunchInCompany(James). [deny(8)].\n18 Derived: -LunchInCompany(x) | AppearToday(x). [resolve(10,b,9,a)].\n19 Derived: -AppearToday(James) | -WorkRemotely(James). [resolve(15,a,14,a)].\n20 Derived: AppearToday(James). [resolve(18,a,17,a)].\n21 Derived: -WorkRemotely(James). [resolve(20,a,19,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_4",
    "context": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James does not have lunch in the company.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "Invalid query: !LunchInCompany(James, True)"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_5",
    "context": "All employees who schedule a meeting with their customers will appear in the company today. Everyone who has lunch in the company schedules meetings with their customers. Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home. No managers work remotely from home. James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (ScheduleMeeting(x) -> AppearToday(x))) # label(non_clause). [assumption].\n2 (all x (LunchInCompany(x) -> ScheduleMeeting(x))) # label(non_clause). [assumption].\n3 (all x (Employee(x) -> LunchInCompany(x) | LunchAtHome(x))) # label(non_clause). [assumption].\n4 (all x (LunchAtHome(x) -> WorkRemote(x))) # label(non_clause). [assumption].\n5 (all x (InOtherCountries(x) -> WorkRemote(x))) # label(non_clause). [assumption].\n6 (all x (Manager(x) -> -WorkRemote(x))) # label(non_clause). [assumption].\n7 Manager(James) & AppearToday(James) | -Manager(James) & -AppearToday(James) # label(non_clause). [assumption].\n8 Manager(James) | InOtherCountries(James) -> LunchAtHome(James) & WorkRemote(James) | -LunchAtHome(James) & -WorkRemote(James) # label(non_clause) # label(goal). [goal].\n9 -ScheduleMeeting(x) | AppearToday(x). [clausify(1)].\n10 -LunchInCompany(x) | ScheduleMeeting(x). [clausify(2)].\n11 -Employee(x) | LunchInCompany(x) | LunchAtHome(x). [clausify(3)].\n12 -LunchAtHome(x) | WorkRemote(x). [clausify(4)].\n13 -InOtherCountries(x) | WorkRemote(x). [clausify(5)].\n14 -Manager(x) | -WorkRemote(x). [clausify(6)].\n15 Manager(James) | -AppearToday(James). [clausify(7)].\n16 AppearToday(James) | -Manager(James). [clausify(7)].\n17 Manager(James) | InOtherCountries(James). [deny(8)].\n18 -LunchAtHome(James) | -WorkRemote(James). [deny(8)].\n19 LunchAtHome(James) | WorkRemote(James). [deny(8)].\n20 Derived: -LunchInCompany(x) | AppearToday(x). [resolve(10,b,9,a)].\n21 Derived: WorkRemote(James) | WorkRemote(James). [resolve(19,a,12,a)].\n22 Derived: -AppearToday(James) | -WorkRemote(James). [resolve(15,a,14,a)].\n23 kept: WorkRemote(James). [copy(19),merge(b)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (ScheduleMeeting(x) -> AppearToday(x))) # label(non_clause). [assumption].\n2 (all x (LunchInCompany(x) -> ScheduleMeeting(x))) # label(non_clause). [assumption].\n3 (all x (Employee(x) -> LunchInCompany(x) | LunchAtHome(x))) # label(non_clause). [assumption].\n4 (all x (LunchAtHome(x) -> WorkRemote(x))) # label(non_clause). [assumption].\n5 (all x (InOtherCountries(x) -> WorkRemote(x))) # label(non_clause). [assumption].\n6 (all x (Manager(x) -> -WorkRemote(x))) # label(non_clause). [assumption].\n7 Manager(James) & AppearToday(James) | -Manager(James) & -AppearToday(James) # label(non_clause). [assumption].\n8 -(Manager(James) | InOtherCountries(James) -> LunchAtHome(James) & WorkRemote(James) | -LunchAtHome(James) & -WorkRemote(James)) # label(non_clause) # label(goal). [goal].\n9 -ScheduleMeeting(x) | AppearToday(x). [clausify(1)].\n10 -LunchInCompany(x) | ScheduleMeeting(x). [clausify(2)].\n11 -Employee(x) | LunchInCompany(x) | LunchAtHome(x). [clausify(3)].\n12 -LunchAtHome(x) | WorkRemote(x). [clausify(4)].\n13 -InOtherCountries(x) | WorkRemote(x). [clausify(5)].\n14 -Manager(x) | -WorkRemote(x). [clausify(6)].\n15 Manager(James) | -AppearToday(James). [clausify(7)].\n16 AppearToday(James) | -Manager(James). [clausify(7)].\n17 -Manager(James) | LunchAtHome(James) | -WorkRemote(James). [deny(8)].\n18 -Manager(James) | WorkRemote(James) | -LunchAtHome(James). [deny(8)].\n19 -InOtherCountries(James) | LunchAtHome(James) | -WorkRemote(James). [deny(8)].\n20 -InOtherCountries(James) | WorkRemote(James) | -LunchAtHome(James). [deny(8)].\n21 Derived: -LunchInCompany(x) | AppearToday(x). [resolve(10,b,9,a)].\n22 Derived: -AppearToday(James) | -WorkRemote(James). [resolve(15,a,14,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_6",
    "context": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? There is an animal.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n3 (exists x Animal(x)).  [goal].\n9 -Animal(x).  [deny(3)].\n10 Animal(Humans).  [assumption].\n12 $F.  [resolve(9,a,10,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_7",
    "context": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No one gets flu.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (FeelsTired(x) -> GetsFlu(x))) # label(non_clause). [assumption].\n2 (all x (Human(x) -> Mammal(x))) # label(non_clause). [assumption].\n3 (all x (Mammal(x) -> Animal(x))) # label(non_clause). [assumption].\n4 -(exists x GetsFlu(x)) # label(non_clause) # label(goal). [goal].\n5 InfectiousDisease(Monkeypox). [assumption].\n6 CausedBy(Monkeypox,Monkeypox_virus). [assumption].\n7 OccursIn(Monkeypox_virus,Humans). [assumption].\n8 Human(Humans). [assumption].\n9 Mammal(Humans). [assumption].\n10 Animal(Humans). [assumption].\n11 SymptomOf(Fever,Monkeypox). [assumption].\n12 SymptomOf(Headache,Monkeypox). [assumption].\n13 SymptomOf(Muscle_pains,Monkeypox). [assumption].\n14 SymptomOf(Feeling_tired,Monkeypox). [assumption].\n15 -FeelsTired(x) | GetsFlu(x). [clausify(1)].\n16 -Human(x) | Mammal(x). [clausify(2)].\n17 -Mammal(x) | Animal(x). [clausify(3)].\n18 GetsFlu(c1). [deny(4)].\n19 Derived: Mammal(Humans). [resolve(16,a,8,a)].\n20 Derived: Animal(Humans). [resolve(17,a,9,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (FeelsTired(x) -> GetsFlu(x))) # label(non_clause). [assumption].\n2 (all x (Human(x) -> Mammal(x))) # label(non_clause). [assumption].\n3 (all x (Mammal(x) -> Animal(x))) # label(non_clause). [assumption].\n4 --(exists x GetsFlu(x)) # label(non_clause) # label(goal). [goal].\n5 InfectiousDisease(Monkeypox). [assumption].\n6 CausedBy(Monkeypox,Monkeypox_virus). [assumption].\n7 OccursIn(Monkeypox_virus,Humans). [assumption].\n8 Human(Humans). [assumption].\n9 Mammal(Humans). [assumption].\n10 Animal(Humans). [assumption].\n11 SymptomOf(Fever,Monkeypox). [assumption].\n12 SymptomOf(Headache,Monkeypox). [assumption].\n13 SymptomOf(Muscle_pains,Monkeypox). [assumption].\n14 SymptomOf(Feeling_tired,Monkeypox). [assumption].\n15 -FeelsTired(x) | GetsFlu(x). [clausify(1)].\n16 -Human(x) | Mammal(x). [clausify(2)].\n17 -Mammal(x) | Animal(x). [clausify(3)].\n18 -GetsFlu(x). [deny(4)].\n19 Derived: Mammal(Humans). [resolve(16,a,8,a)].\n20 Derived: Animal(Humans). [resolve(17,a,9,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_8",
    "context": "Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Symptons of Monkeypox include coughing.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'NoneType' object has no attribute 'rstrip'"
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid character '∀' (U+2200) (<string>, line 30)"
      }
    }
  },
  {
    "id": "FOLIO_dev_9",
    "context": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is an Ocellated wild turkey.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamWildTurkey(x) | RioGrandeWildTurkey(x) | OcellatedWildTurkey(x) -> WildTurkey(x) # label(non_clause). [assumption].\n2 OcellatedWildTurkey(Tom) # label(non_clause) # label(goal). [goal].\n3 WildTurkey(Tom). [assumption].\n4 -EasternWildTurkey(Tom). [assumption].\n5 -OsceolaWildTurkey(Tom). [assumption].\n6 -GouldsWildTurkey(Tom). [assumption].\n7 -MerriamWildTurkey(Tom). [assumption].\n8 -RioGrandeWildTurkey(Tom). [assumption].\n9 -EasternWildTurkey(x) | WildTurkey(x). [clausify(1)].\n10 -OsceolaWildTurkey(x) | WildTurkey(x). [clausify(1)].\n11 -GouldsWildTurkey(x) | WildTurkey(x). [clausify(1)].\n12 -MerriamWildTurkey(x) | WildTurkey(x). [clausify(1)].\n13 -RioGrandeWildTurkey(x) | WildTurkey(x). [clausify(1)].\n14 -OcellatedWildTurkey(x) | WildTurkey(x). [clausify(1)].\n15 -OcellatedWildTurkey(Tom). [deny(2)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamWildTurkey(x) | RioGrandeWildTurkey(x) | OcellatedWildTurkey(x) -> WildTurkey(x) # label(non_clause). [assumption].\n2 -OcellatedWildTurkey(Tom) # label(non_clause) # label(goal). [goal].\n3 WildTurkey(Tom). [assumption].\n4 -EasternWildTurkey(Tom). [assumption].\n5 -OsceolaWildTurkey(Tom). [assumption].\n6 -GouldsWildTurkey(Tom). [assumption].\n7 -MerriamWildTurkey(Tom). [assumption].\n8 -RioGrandeWildTurkey(Tom). [assumption].\n9 -EasternWildTurkey(x) | WildTurkey(x). [clausify(1)].\n10 -OsceolaWildTurkey(x) | WildTurkey(x). [clausify(1)].\n11 -GouldsWildTurkey(x) | WildTurkey(x). [clausify(1)].\n12 -MerriamWildTurkey(x) | WildTurkey(x). [clausify(1)].\n13 -RioGrandeWildTurkey(x) | WildTurkey(x). [clausify(1)].\n14 -OcellatedWildTurkey(x) | WildTurkey(x). [clausify(1)].\n15 OcellatedWildTurkey(Tom). [deny(2)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid character '≠' (U+2260) (<string>, line 4)"
      }
    }
  },
  {
    "id": "FOLIO_dev_10",
    "context": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Tom is an Eastern wild turkey.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n2 -EasternWildTurkey(Tom).  [goal].\n5 EasternWildTurkey(Tom).  [deny(2)].\n6 -EasternWildTurkey(Tom).  [assumption].\n7 $F.  [resolve(5,a,6,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": null,
        "reasoning": "=== CSP Solving Trace ===\n\nTRY: Tom = 6\n  SUCCESS: {'Tom': 6}\n  BACKTRACK: Tom (no more values to try)",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_11",
    "context": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Joey is a wild turkey.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 WildTurkey(Tom) & -Eastern(Tom) & -Osceola(Tom) & -Gould(Tom) & -Merriam(Tom) & -RioGrande(Tom) -> Ocellated(Tom) # label(non_clause). [assumption].\n2 WildTurkey(Joey) # label(non_clause) # label(goal). [goal].\n3 WildTurkey(Tom). [assumption].\n4 -Eastern(Tom). [assumption].\n5 -Osceola(Tom). [assumption].\n6 -Gould(Tom). [assumption].\n7 -Merriam(Tom). [assumption].\n8 -RioGrande(Tom). [assumption].\n9 -WildTurkey(Tom) | Eastern(Tom) | Osceola(Tom) | Gould(Tom) | Merriam(Tom) | RioGrande(Tom) | Ocellated(Tom). [clausify(1)].\n10 -WildTurkey(Joey). [deny(2)].\n11 Derived: Eastern(Tom) | Osceola(Tom) | Gould(Tom) | Merriam(Tom) | RioGrande(Tom) | Ocellated(Tom). [resolve(9,a,3,a)].\n12 Derived: Osceola(Tom) | Gould(Tom) | Merriam(Tom) | RioGrande(Tom) | Ocellated(Tom). [resolve(11,a,4,a)].\n13 Derived: Gould(Tom) | Merriam(Tom) | RioGrande(Tom) | Ocellated(Tom). [resolve(12,a,5,a)].\n14 Derived: Merriam(Tom) | RioGrande(Tom) | Ocellated(Tom). [resolve(13,a,6,a)].\n15 Derived: RioGrande(Tom) | Ocellated(Tom). [resolve(14,a,7,a)].\n16 Derived: Ocellated(Tom). [resolve(15,a,8,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 WildTurkey(Tom) & -Eastern(Tom) & -Osceola(Tom) & -Gould(Tom) & -Merriam(Tom) & -RioGrande(Tom) -> Ocellated(Tom) # label(non_clause). [assumption].\n2 -WildTurkey(Joey) # label(non_clause) # label(goal). [goal].\n3 WildTurkey(Tom). [assumption].\n4 -Eastern(Tom). [assumption].\n5 -Osceola(Tom). [assumption].\n6 -Gould(Tom). [assumption].\n7 -Merriam(Tom). [assumption].\n8 -RioGrande(Tom). [assumption].\n9 -WildTurkey(Tom) | Eastern(Tom) | Osceola(Tom) | Gould(Tom) | Merriam(Tom) | RioGrande(Tom) | Ocellated(Tom). [clausify(1)].\n10 WildTurkey(Joey). [deny(2)].\n11 Derived: Eastern(Tom) | Osceola(Tom) | Gould(Tom) | Merriam(Tom) | RioGrande(Tom) | Ocellated(Tom). [resolve(9,a,3,a)].\n12 Derived: Osceola(Tom) | Gould(Tom) | Merriam(Tom) | RioGrande(Tom) | Ocellated(Tom). [resolve(11,a,4,a)].\n13 Derived: Gould(Tom) | Merriam(Tom) | RioGrande(Tom) | Ocellated(Tom). [resolve(12,a,5,a)].\n14 Derived: Merriam(Tom) | RioGrande(Tom) | Ocellated(Tom). [resolve(13,a,6,a)].\n15 Derived: RioGrande(Tom) | Ocellated(Tom). [resolve(14,a,7,a)].\n16 Derived: Ocellated(Tom). [resolve(15,a,8,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "unterminated string literal (detected at line 13) (<string>, line 13)"
      }
    }
  },
  {
    "id": "FOLIO_dev_12",
    "context": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The Legend of Zelda is in the Top 10 list.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": null,
        "reasoning": "=== CSP Solving Trace ===\n\nTRY: convertible = 3\nFAIL: convertible = 3 (violates: minivan > convertible)\n  TRY: convertible = 2\n  TRY: minivan = 3\n    TRY: station_wagon = 1\n      SUCCESS: {'convertible': 2, 'minivan': 3, 'station_wagon': 1}\n      BACKTRACK: station_wagon (no more values to try)\n  TRY: convertible = 1\nFAIL: convertible = 1 (violates: AllDifferentConstraint([station_wagon, convertible, minivan]))\n  BACKTRACK: convertible (no more values to try)",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_13",
    "context": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? FIFA 22 is made by a Japanese video game company.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (facts.JapaneseGameCompany([FIFA 22's company], $label), line 1)"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid character '→' (U+2192) (<string>, line 9)"
      }
    }
  },
  {
    "id": "FOLIO_dev_14",
    "context": "A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? The Legend of Zelda is not in the Top 10 list.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid character '∀' (U+2200) (<string>, line 10)"
      }
    }
  },
  {
    "id": "FOLIO_dev_15",
    "context": "All squares have four sides. All four-sided things are shapes.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? All squares are shapes.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n1 (all x (Square(x) -> FourSided(x))).  [assumption].\n2 (all x (FourSided(x) -> Shape(x))).  [assumption].\n3 (all x (Square(x) -> Shape(x))).  [goal].\n4 Square(c1).  [deny(3)].\n5 -Square(x) | FourSided(x).  [clausify(1)].\n6 FourSided(c1).  [resolve(4,a,5,a)].\n7 -FourSided(x) | Shape(x).  [clausify(2)].\n8 Shape(c1).  [resolve(6,a,7,a)].\n9 -Shape(c1).  [deny(3)].\n10 $F.  [resolve(8,a,9,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": null,
        "reasoning": "=== CSP Solving Trace ===\n\nTRY: convertible = 3\nFAIL: convertible = 3 (violates: minivan > convertible)\n  TRY: convertible = 2\n  TRY: minivan = 3\n    TRY: station_wagon = 1\n      SUCCESS: {'convertible': 2, 'minivan': 3, 'station_wagon': 1}\n      BACKTRACK: station_wagon (no more values to try)\n  TRY: convertible = 1\nFAIL: convertible = 1 (violates: AllDifferentConstraint([station_wagon, convertible, minivan]))\n  BACKTRACK: convertible (no more values to try)",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_16",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is a turtle.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Rabbit(x) -> Cute(x))) # label(non_clause). [assumption].\n2 (exists x Turtle(x)) # label(non_clause). [assumption].\n3 (all x (Animal(x) -> Rabbit(x) | Squirrel(x))) # label(non_clause). [assumption].\n4 (all x (Skittish(x) -> -Still(x))) # label(non_clause). [assumption].\n5 (all x (Squirrel(x) -> Skittish(x))) # label(non_clause). [assumption].\n6 Turtle(Rock) # label(non_clause) # label(goal). [goal].\n7 -Rabbit(x) | Cute(x). [clausify(1)].\n8 Turtle(c1). [clausify(2)].\n9 -Animal(x) | Rabbit(x) | Squirrel(x). [clausify(3)].\n10 -Skittish(x) | -Still(x). [clausify(4)].\n11 -Squirrel(x) | Skittish(x). [clausify(5)].\n12 Still(Rock). [assumption].\n13 -Turtle(Rock). [deny(6)].\n14 Derived: -Animal(x) | Squirrel(x) | Cute(x). [resolve(9,b,7,a)].\n15 Derived: -Squirrel(x) | -Still(x). [resolve(11,b,10,a)].\n16 Derived: -Squirrel(Rock). [resolve(15,b,12,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Rabbit(x) -> Cute(x))) # label(non_clause). [assumption].\n2 (exists x Turtle(x)) # label(non_clause). [assumption].\n3 (all x (Animal(x) -> Rabbit(x) | Squirrel(x))) # label(non_clause). [assumption].\n4 (all x (Skittish(x) -> -Still(x))) # label(non_clause). [assumption].\n5 (all x (Squirrel(x) -> Skittish(x))) # label(non_clause). [assumption].\n6 -Turtle(Rock) # label(non_clause) # label(goal). [goal].\n7 -Rabbit(x) | Cute(x). [clausify(1)].\n8 Turtle(c1). [clausify(2)].\n9 -Animal(x) | Rabbit(x) | Squirrel(x). [clausify(3)].\n10 -Skittish(x) | -Still(x). [clausify(4)].\n11 -Squirrel(x) | Skittish(x). [clausify(5)].\n12 Still(Rock). [assumption].\n13 Turtle(Rock). [deny(6)].\n14 Derived: -Animal(x) | Squirrel(x) | Cute(x). [resolve(9,b,7,a)].\n15 Derived: -Squirrel(x) | -Still(x). [resolve(11,b,10,a)].\n16 Derived: -Squirrel(Rock). [resolve(15,b,12,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_17",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is not a turtle.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Rabbit(x) -> Cute(x))) # label(non_clause). [assumption].\n2 (exists x Turtle(x)) # label(non_clause). [assumption].\n3 (all x (Animal(x) -> Rabbit(x) | Squirrel(x))) # label(non_clause). [assumption].\n4 (all x (Skittish(x) -> -Still(x))) # label(non_clause). [assumption].\n5 (all x (Squirrel(x) -> Skittish(x))) # label(non_clause). [assumption].\n6 -Turtle(Rock) # label(non_clause) # label(goal). [goal].\n7 -Rabbit(x) | Cute(x). [clausify(1)].\n8 Turtle(c1). [clausify(2)].\n9 -Animal(x) | Rabbit(x) | Squirrel(x). [clausify(3)].\n10 -Skittish(x) | -Still(x). [clausify(4)].\n11 -Squirrel(x) | Skittish(x). [clausify(5)].\n12 Still(Rock). [assumption].\n13 Turtle(Rock). [deny(6)].\n14 Derived: -Animal(x) | Squirrel(x) | Cute(x). [resolve(9,b,7,a)].\n15 Derived: -Squirrel(x) | -Still(x). [resolve(11,b,10,a)].\n16 Derived: -Squirrel(Rock). [resolve(15,b,12,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Rabbit(x) -> Cute(x))) # label(non_clause). [assumption].\n2 (exists x Turtle(x)) # label(non_clause). [assumption].\n3 (all x (Animal(x) -> Rabbit(x) | Squirrel(x))) # label(non_clause). [assumption].\n4 (all x (Skittish(x) -> -Still(x))) # label(non_clause). [assumption].\n5 (all x (Squirrel(x) -> Skittish(x))) # label(non_clause). [assumption].\n6 --Turtle(Rock) # label(non_clause) # label(goal). [goal].\n7 -Rabbit(x) | Cute(x). [clausify(1)].\n8 Turtle(c1). [clausify(2)].\n9 -Animal(x) | Rabbit(x) | Squirrel(x). [clausify(3)].\n10 -Skittish(x) | -Still(x). [clausify(4)].\n11 -Squirrel(x) | Skittish(x). [clausify(5)].\n12 Still(Rock). [assumption].\n13 -Turtle(Rock). [deny(6)].\n14 Derived: -Animal(x) | Squirrel(x) | Cute(x). [resolve(9,b,7,a)].\n15 Derived: -Squirrel(x) | -Still(x). [resolve(11,b,10,a)].\n16 Derived: -Squirrel(Rock). [resolve(15,b,12,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_18",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Rock is a turtle or cute.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n1 (all x (Rabbit(x) -> Cute(x))).  [assumption].\n3 (all x (Rabbit(x) | Squirrel(x))).  [assumption].\n4 (all x (Skittish(x) -> -Still(x))).  [assumption].\n5 (all x (Squirrel(x) -> Skittish(x))).  [assumption].\n6 Turtle(Rock) | Cute(Rock).  [goal].\n7 Rabbit(x) | Squirrel(x).  [clausify(3)].\n8 -Rabbit(x) | Cute(x).  [clausify(1)].\n11 -Squirrel(x) | Skittish(x).  [clausify(5)].\n12 -Skittish(x) | -Still(x).  [clausify(4)].\n13 -Squirrel(x) | -Still(x).  [resolve(11,b,12,a)].\n14 Still(Rock).  [assumption].\n15 Squirrel(x) | Cute(x).  [resolve(7,a,8,a)].\n16 -Cute(Rock).  [deny(6)].\n17 Squirrel(Rock).  [resolve(15,b,16,a)].\n18 -Squirrel(Rock).  [resolve(13,b,14,a)].\n19 $F.  [resolve(17,a,18,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_19",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n1 (all x (Rabbit(x) -> Cute(x))).  [assumption].\n3 (all x (Rabbit(x) | Squirrel(x))).  [assumption].\n6 -Turtle(Rock) & -Squirrel(Rock) -> Cute(Rock) | Skittish(Rock).  [goal].\n7 Rabbit(x) | Squirrel(x).  [clausify(3)].\n8 -Rabbit(x) | Cute(x).  [clausify(1)].\n16 Squirrel(x) | Cute(x).  [resolve(7,a,8,a)].\n17 -Squirrel(Rock).  [deny(6)].\n19 Cute(Rock).  [resolve(16,a,17,a)].\n20 -Cute(Rock).  [deny(6)].\n21 $F.  [resolve(19,a,20,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid character '→' (U+2192) (<string>, line 9)"
      }
    }
  },
  {
    "id": "FOLIO_dev_20",
    "context": "All rabbits are cute. Some turtles exist. An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Rock is cute and still, then Rock is a turtle and skittish.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid character '→' (U+2192) (<string>, line 9)"
      }
    }
  },
  {
    "id": "FOLIO_dev_21",
    "context": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Karen will share \"Stranger Things\" to Lisa.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_22",
    "context": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? \"Black Mirror\" is popular.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "B",
        "reasoning": "prove negation of original conclusion:\n1 (all x (Popular(x) & NetflixShow(x) -> BingeWatch(x))).  [assumption].\n2 (all x (BingeWatch(x) <-> Download(x))).  [assumption].\n4 -Popular(\"BlackMirror\").  [goal].\n5 -Popular(x) | -NetflixShow(x) | BingeWatch(x).  [clausify(1)].\n7 NetflixShow(\"BlackMirror\").  [assumption].\n8 -BingeWatch(x) | Download(x).  [clausify(2)].\n9 -Download(\"BlackMirror\").  [assumption].\n13 -Popular(\"BlackMirror\") | BingeWatch(\"BlackMirror\").  [resolve(5,b,7,a)].\n14 -BingeWatch(\"BlackMirror\").  [resolve(8,b,9,a)].\n16 Popular(\"BlackMirror\").  [deny(4)].\n18 -Popular(\"BlackMirror\").  [resolve(14,a,13,b)].\n19 $F.  [resolve(18,a,16,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_23",
    "context": "\"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Karen will share \"Black Mirror\" to Lisa.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "Unexpected token: '.'.  Expected token ')'.\n((1.NetflixShow(\"StrangerThings\")) & (Popular(\"StrangerThings\"))) -> (BingeWatch(\"StrangerThings\"))\n   ^"
      },
      "CSP": {
        "predict": null,
        "reasoning": "=== CSP Solving Trace ===\n\nTRY: convertible = 3\nFAIL: convertible = 3 (violates: minivan > convertible)\n  TRY: convertible = 2\n  TRY: minivan = 3\n    TRY: station_wagon = 1\n      SUCCESS: {'convertible': 2, 'minivan': 3, 'station_wagon': 1}\n      BACKTRACK: station_wagon (no more values to try)\n  TRY: convertible = 1\nFAIL: convertible = 1 (violates: AllDifferentConstraint([station_wagon, convertible, minivan]))\n  BACKTRACK: convertible (no more values to try)",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_24",
    "context": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 HostedOlympics(Beijing,2008,Summer,True) & HostedOlympics(Beijing,_,Winter,True) -> HostedBothOlympics(Beijing,True) # label(non_clause). [assumption].\n2 HostedParalympics(Beijing,2008,Summer,True) & HostedParalympics(Beijing,_,Winter,True) -> HostedBothParalympics(Beijing,True) # label(non_clause). [assumption].\n3 HostedOlympics(Beijing,2008,Summer,True) & HostedOlympics(Beijing,_,Winter,True) # label(non_clause) # label(goal). [goal].\n4 Capital(Beijing,China,True). [assumption].\n5 PopulousCapital(Beijing,True). [assumption].\n6 LocatedIn(Beijing,NorthernChina,True). [assumption].\n7 HostedOlympics(Beijing,2008,Summer,True). [assumption].\n8 HostedParalympics(Beijing,2008,Summer,True). [assumption].\n9 HostedBothOlympics(Beijing,True). [assumption].\n10 HostedBothParalympics(Beijing,True). [assumption].\n11 TopUniversities(Beijing,True). [assumption].\n12 -HostedOlympics(Beijing,2008,Summer,True) | -HostedOlympics(Beijing,_,Winter,True) | HostedBothOlympics(Beijing,True). [clausify(1)].\n13 -HostedParalympics(Beijing,2008,Summer,True) | -HostedParalympics(Beijing,_,Winter,True) | HostedBothParalympics(Beijing,True). [clausify(2)].\n14 -HostedOlympics(Beijing,2008,Summer,True) | -HostedOlympics(Beijing,_,Winter,True). [deny(3)].\n15 kept: -HostedOlympics(Beijing,_,Winter,True). [copy(5),unit_del(a,7)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 HostedOlympics(Beijing,2008,Summer,True) & HostedOlympics(Beijing,_,Winter,True) -> HostedBothOlympics(Beijing,True) # label(non_clause). [assumption].\n2 HostedParalympics(Beijing,2008,Summer,True) & HostedParalympics(Beijing,_,Winter,True) -> HostedBothParalympics(Beijing,True) # label(non_clause). [assumption].\n3 -(HostedOlympics(Beijing,2008,Summer,True) & HostedOlympics(Beijing,_,Winter,True)) # label(non_clause) # label(goal). [goal].\n4 Capital(Beijing,China,True). [assumption].\n5 PopulousCapital(Beijing,True). [assumption].\n6 LocatedIn(Beijing,NorthernChina,True). [assumption].\n7 HostedOlympics(Beijing,2008,Summer,True). [assumption].\n8 HostedParalympics(Beijing,2008,Summer,True). [assumption].\n9 HostedBothOlympics(Beijing,True). [assumption].\n10 HostedBothParalympics(Beijing,True). [assumption].\n11 TopUniversities(Beijing,True). [assumption].\n12 -HostedOlympics(Beijing,2008,Summer,True) | -HostedOlympics(Beijing,_,Winter,True) | HostedBothOlympics(Beijing,True). [clausify(1)].\n13 -HostedParalympics(Beijing,2008,Summer,True) | -HostedParalympics(Beijing,_,Winter,True) | HostedBothParalympics(Beijing,True). [clausify(2)].\n14 HostedOlympics(Beijing,2008,Summer,True). [deny(3)].\n15 HostedOlympics(Beijing,_,Winter,True). [deny(3)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": null,
        "reasoning": "=== CSP Solving Trace ===\n\nTRY: convertible = 3\nFAIL: convertible = 3 (violates: minivan > convertible)\n  TRY: convertible = 2\n  TRY: minivan = 3\n    TRY: station_wagon = 1\n      SUCCESS: {'convertible': 2, 'minivan': 3, 'station_wagon': 1}\n      BACKTRACK: station_wagon (no more values to try)\n  TRY: convertible = 1\nFAIL: convertible = 1 (violates: AllDifferentConstraint([station_wagon, convertible, minivan]))\n  BACKTRACK: convertible (no more values to try)",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_25",
    "context": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beijing is located in southern China.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 -LocatedIn(Beijing,Southern_China,True) # label(non_clause) # label(goal). [goal].\n2 Capital(Beijing,China,True). [assumption].\n3 PopulousCapital(Beijing,True). [assumption].\n4 LocatedIn(Beijing,Northern_China,True). [assumption].\n5 HostedOlympics(Beijing,2008,Summer,True). [assumption].\n6 HostedParalympics(Beijing,2008,Summer,True). [assumption].\n7 HostedOlympics(Beijing,2022,Winter,True). [assumption].\n8 HostedParalympics(Beijing,2022,Winter,True). [assumption].\n9 UniversityRanking(Beijing,Best_in_Asia_Pacific_and_world,True). [assumption].\n10 LocatedIn(Beijing,Southern_China,True). [deny(1)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 --LocatedIn(Beijing,Southern_China,True) # label(non_clause) # label(goal). [goal].\n2 Capital(Beijing,China,True). [assumption].\n3 PopulousCapital(Beijing,True). [assumption].\n4 LocatedIn(Beijing,Northern_China,True). [assumption].\n5 HostedOlympics(Beijing,2008,Summer,True). [assumption].\n6 HostedParalympics(Beijing,2008,Summer,True). [assumption].\n7 HostedOlympics(Beijing,2022,Winter,True). [assumption].\n8 HostedParalympics(Beijing,2022,Winter,True). [assumption].\n9 UniversityRanking(Beijing,Best_in_Asia_Pacific_and_world,True). [assumption].\n10 -LocatedIn(Beijing,Southern_China,True). [deny(1)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": null,
        "reasoning": "=== CSP Solving Trace ===\n\nTRY: convertible = 3\nFAIL: convertible = 3 (violates: minivan > convertible)\n  TRY: convertible = 2\n  TRY: minivan = 3\n    TRY: station_wagon = 1\n      SUCCESS: {'convertible': 2, 'minivan': 3, 'station_wagon': 1}\n      BACKTRACK: station_wagon (no more values to try)\n  TRY: convertible = 1\nFAIL: convertible = 1 (violates: AllDifferentConstraint([station_wagon, convertible, minivan]))\n  BACKTRACK: convertible (no more values to try)",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_26",
    "context": "Beijing is the capital of the People's Republic of China. Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beijing is the second largest Chinese city by urban population.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (<string>, line 5)"
      }
    }
  },
  {
    "id": "FOLIO_dev_27",
    "context": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Marvin is an alien.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Alien(x) -> Extraterrestrial(x))) # label(non_clause). [assumption].\n2 (all x (FromMars(x) -> Alien(x))) # label(non_clause). [assumption].\n3 (all x (Extraterrestrial(x) -> -Human(x))) # label(non_clause). [assumption].\n4 (all x (FromEarth(x) -> Human(x))) # label(non_clause). [assumption].\n5 -FromEarth(Marvin) -> Extraterrestrial(Marvin) # label(non_clause). [assumption].\n6 Alien(Marvin) # label(non_clause) # label(goal). [goal].\n7 -Alien(x) | Extraterrestrial(x). [clausify(1)].\n8 -FromMars(x) | Alien(x). [clausify(2)].\n9 -Extraterrestrial(x) | -Human(x). [clausify(3)].\n10 -FromEarth(x) | Human(x). [clausify(4)].\n11 -FromEarth(Marvin) | -FromMars(Marvin). [assumption].\n12 FromEarth(Marvin) | Extraterrestrial(Marvin). [clausify(5)].\n13 -Alien(Marvin). [deny(6)].\n14 Derived: -FromMars(x) | Extraterrestrial(x). [resolve(8,b,7,a)].\n15 Derived: -FromMars(Marvin). [resolve(13,a,8,b)].\n16 Derived: FromEarth(Marvin) | -Human(Marvin). [resolve(12,b,9,a)].\n17 Derived: -FromMars(x) | -Human(x). [resolve(14,b,9,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Alien(x) -> Extraterrestrial(x))) # label(non_clause). [assumption].\n2 (all x (FromMars(x) -> Alien(x))) # label(non_clause). [assumption].\n3 (all x (Extraterrestrial(x) -> -Human(x))) # label(non_clause). [assumption].\n4 (all x (FromEarth(x) -> Human(x))) # label(non_clause). [assumption].\n5 -FromEarth(Marvin) -> Extraterrestrial(Marvin) # label(non_clause). [assumption].\n6 -Alien(Marvin) # label(non_clause) # label(goal). [goal].\n7 -Alien(x) | Extraterrestrial(x). [clausify(1)].\n8 -FromMars(x) | Alien(x). [clausify(2)].\n9 -Extraterrestrial(x) | -Human(x). [clausify(3)].\n10 -FromEarth(x) | Human(x). [clausify(4)].\n11 -FromEarth(Marvin) | -FromMars(Marvin). [assumption].\n12 FromEarth(Marvin) | Extraterrestrial(Marvin). [clausify(5)].\n13 Alien(Marvin). [deny(6)].\n14 Derived: -FromMars(x) | Extraterrestrial(x). [resolve(8,b,7,a)].\n15 Derived: Extraterrestrial(Marvin). [resolve(13,a,7,a)].\n16 Derived: FromEarth(Marvin) | -Human(Marvin). [resolve(12,b,9,a)].\n17 Derived: -FromMars(x) | -Human(x). [resolve(14,b,9,a)].\n18 Derived: -Human(Marvin). [resolve(15,a,9,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid character '→' (U+2192) (<string>, line 8)"
      }
    }
  },
  {
    "id": "FOLIO_dev_28",
    "context": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Marvin is neither a human nor from Mars.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "B",
        "reasoning": "prove negation of original conclusion:\n4 (all x (FromEarth(x) -> Human(x))).  [assumption].\n5 -FromEarth(Marvin) & --FromMars(Marvin) | --FromEarth(Marvin) & -FromMars(Marvin).  [assumption].\n7 -(-Human(Marvin) & -FromMars(Marvin)).  [goal].\n13 FromMars(Marvin) | FromEarth(Marvin).  [clausify(5)].\n14 -FromEarth(x) | Human(x).  [clausify(4)].\n16 FromMars(Marvin) | Human(Marvin).  [resolve(13,b,14,a)].\n17 -Human(Marvin).  [deny(7)].\n19 FromMars(Marvin).  [resolve(16,b,17,a)].\n20 -FromMars(Marvin).  [deny(7)].\n21 $F.  [resolve(19,a,20,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_29",
    "context": "All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? If Marvin is not from Mars, then Marvin is a human.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_30",
    "context": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Djokovic is a Grand Slam champion.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (GrandSlamChampion(x) | OscarNominatedActor(x))) # label(non_clause). [assumption].\n2 (all x (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))) # label(non_clause). [assumption].\n3 (all x (OscarNominatedActor(x) -> Celebrity(x))) # label(non_clause). [assumption].\n4 (all x (ProfessionalTennisPlayer(x) -> Athlete(x))) # label(non_clause). [assumption].\n5 (all x (Celebrity(x) -> WellPaid(x))) # label(non_clause). [assumption].\n6 (all x (Athlete(x) -> Famous(x))) # label(non_clause). [assumption].\n7 (all x (WellPaid(x) -> LivesInTaxHaven(x))) # label(non_clause). [assumption].\n8 Famous(Djokovic) & Athlete(Djokovic) -> WellPaid(Djokovic) # label(non_clause). [assumption].\n9 GrandSlamChampion(Djokovic) # label(non_clause) # label(goal). [goal].\n10 GrandSlamChampion(x) | OscarNominatedActor(x). [clausify(1)].\n11 -GrandSlamChampion(x) | ProfessionalTennisPlayer(x). [clausify(2)].\n12 -OscarNominatedActor(x) | Celebrity(x). [clausify(3)].\n13 -ProfessionalTennisPlayer(x) | Athlete(x). [clausify(4)].\n14 -Celebrity(x) | WellPaid(x). [clausify(5)].\n15 -Athlete(x) | Famous(x). [clausify(6)].\n16 -WellPaid(x) | LivesInTaxHaven(x). [clausify(7)].\n17 -Famous(Djokovic) | -Athlete(Djokovic) | WellPaid(Djokovic). [clausify(8)].\n18 -GrandSlamChampion(Djokovic). [deny(9)].\n19 Derived: ProfessionalTennisPlayer(x) | OscarNominatedActor(x). [resolve(11,a,10,a)].\n20 Derived: OscarNominatedActor(Djokovic). [resolve(18,a,10,a)].\n21 Derived: ProfessionalTennisPlayer(x) | Celebrity(x). [resolve(19,b,12,a)].\n22 Derived: Celebrity(Djokovic). [resolve(20,a,12,a)].\n23 Derived: Celebrity(x) | Athlete(x). [resolve(21,a,13,a)].\n24 Derived: WellPaid(Djokovic). [resolve(22,a,14,a)].\n25 Derived: Athlete(x) | WellPaid(x). [resolve(23,a,14,a)].\n26 Derived: WellPaid(x) | Famous(x). [resolve(25,a,15,a)].\n27 Derived: WellPaid(Djokovic) | -Famous(Djokovic) | WellPaid(Djokovic). [resolve(25,a,17,b)].\n28 Derived: WellPaid(Djokovic) | WellPaid(Djokovic) | WellPaid(Djokovic). [resolve(27,b,26,b)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (GrandSlamChampion(x) | OscarNominatedActor(x))) # label(non_clause). [assumption].\n2 (all x (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))) # label(non_clause). [assumption].\n3 (all x (OscarNominatedActor(x) -> Celebrity(x))) # label(non_clause). [assumption].\n4 (all x (ProfessionalTennisPlayer(x) -> Athlete(x))) # label(non_clause). [assumption].\n5 (all x (Celebrity(x) -> WellPaid(x))) # label(non_clause). [assumption].\n6 (all x (Athlete(x) -> Famous(x))) # label(non_clause). [assumption].\n7 (all x (WellPaid(x) -> LivesInTaxHaven(x))) # label(non_clause). [assumption].\n8 Famous(Djokovic) & Athlete(Djokovic) -> WellPaid(Djokovic) # label(non_clause). [assumption].\n9 -GrandSlamChampion(Djokovic) # label(non_clause) # label(goal). [goal].\n10 GrandSlamChampion(x) | OscarNominatedActor(x). [clausify(1)].\n11 -GrandSlamChampion(x) | ProfessionalTennisPlayer(x). [clausify(2)].\n12 -OscarNominatedActor(x) | Celebrity(x). [clausify(3)].\n13 -ProfessionalTennisPlayer(x) | Athlete(x). [clausify(4)].\n14 -Celebrity(x) | WellPaid(x). [clausify(5)].\n15 -Athlete(x) | Famous(x). [clausify(6)].\n16 -WellPaid(x) | LivesInTaxHaven(x). [clausify(7)].\n17 -Famous(Djokovic) | -Athlete(Djokovic) | WellPaid(Djokovic). [clausify(8)].\n18 GrandSlamChampion(Djokovic). [deny(9)].\n19 Derived: ProfessionalTennisPlayer(x) | OscarNominatedActor(x). [resolve(11,a,10,a)].\n20 Derived: ProfessionalTennisPlayer(Djokovic). [resolve(18,a,11,a)].\n21 Derived: ProfessionalTennisPlayer(x) | Celebrity(x). [resolve(19,b,12,a)].\n22 Derived: Athlete(Djokovic). [resolve(20,a,13,a)].\n23 Derived: Celebrity(x) | Athlete(x). [resolve(21,a,13,a)].\n24 Derived: Athlete(x) | WellPaid(x). [resolve(23,a,14,a)].\n25 Derived: Famous(Djokovic). [resolve(22,a,15,a)].\n26 Derived: -Famous(Djokovic) | WellPaid(Djokovic). [resolve(22,a,17,b)].\n27 Derived: WellPaid(x) | Famous(x). [resolve(24,a,15,a)].\n28 Derived: -Famous(Djokovic) | LivesInTaxHaven(Djokovic). [resolve(26,b,16,a)].\n29 Derived: Famous(x) | LivesInTaxHaven(x). [resolve(27,a,16,a)].\n30 Derived: LivesInTaxHaven(Djokovic). [resolve(28,a,25,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid character '∨' (U+2228) (<string>, line 11)"
      }
    }
  },
  {
    "id": "FOLIO_dev_31",
    "context": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Djokovic lives in a tax haven.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_32",
    "context": "A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Djokovic does not live in a tax haven.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))) # label(non_clause). [assumption].\n2 (all x (OscarNominatedActor(x) -> Celebrity(x))) # label(non_clause). [assumption].\n3 (all x (ProfessionalTennisPlayer(x) -> Athlete(x))) # label(non_clause). [assumption].\n4 (all x (Celebrity(x) -> WellPaid(x))) # label(non_clause). [assumption].\n5 (all x (Athlete(x) -> Famous(x))) # label(non_clause). [assumption].\n6 (all x (WellPaid(x) -> LivesInTaxHaven(x))) # label(non_clause). [assumption].\n7 Famous(Djokovic) & Athlete(Djokovic) -> WellPaid(Djokovic) # label(non_clause). [assumption].\n8 -LivesInTaxHaven(Djokovic) # label(non_clause) # label(goal). [goal].\n9 -GrandSlamChampion(x) | ProfessionalTennisPlayer(x). [clausify(1)].\n10 -OscarNominatedActor(x) | Celebrity(x). [clausify(2)].\n11 -ProfessionalTennisPlayer(x) | Athlete(x). [clausify(3)].\n12 -Celebrity(x) | WellPaid(x). [clausify(4)].\n13 -Athlete(x) | Famous(x). [clausify(5)].\n14 -WellPaid(x) | LivesInTaxHaven(x). [clausify(6)].\n15 -Famous(Djokovic) | -Athlete(Djokovic) | WellPaid(Djokovic). [clausify(7)].\n16 LivesInTaxHaven(Djokovic). [deny(8)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))) # label(non_clause). [assumption].\n2 (all x (OscarNominatedActor(x) -> Celebrity(x))) # label(non_clause). [assumption].\n3 (all x (ProfessionalTennisPlayer(x) -> Athlete(x))) # label(non_clause). [assumption].\n4 (all x (Celebrity(x) -> WellPaid(x))) # label(non_clause). [assumption].\n5 (all x (Athlete(x) -> Famous(x))) # label(non_clause). [assumption].\n6 (all x (WellPaid(x) -> LivesInTaxHaven(x))) # label(non_clause). [assumption].\n7 Famous(Djokovic) & Athlete(Djokovic) -> WellPaid(Djokovic) # label(non_clause). [assumption].\n8 --LivesInTaxHaven(Djokovic) # label(non_clause) # label(goal). [goal].\n9 -GrandSlamChampion(x) | ProfessionalTennisPlayer(x). [clausify(1)].\n10 -OscarNominatedActor(x) | Celebrity(x). [clausify(2)].\n11 -ProfessionalTennisPlayer(x) | Athlete(x). [clausify(3)].\n12 -Celebrity(x) | WellPaid(x). [clausify(4)].\n13 -Athlete(x) | Famous(x). [clausify(5)].\n14 -WellPaid(x) | LivesInTaxHaven(x). [clausify(6)].\n15 -Famous(Djokovic) | -Athlete(Djokovic) | WellPaid(Djokovic). [clausify(7)].\n16 -LivesInTaxHaven(Djokovic). [deny(8)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_33",
    "context": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Roderick strong leads a professional wrestling stable.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n1 Leads(RoderickStrong,DiamondMine) & WrestlingStable(DiamondMine).  [goal].\n2 -Leads(RoderickStrong,DiamondMine) | -WrestlingStable(DiamondMine).  [deny(1)].\n3 WrestlingStable(DiamondMine).  [assumption].\n4 -Leads(RoderickStrong,DiamondMine).  [resolve(2,b,3,a)].\n5 Leads(RoderickStrong,DiamondMine).  [assumption].\n6 $F.  [resolve(4,a,5,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid character '∧' (U+2227) (<string>, line 7)"
      }
    }
  },
  {
    "id": "FOLIO_dev_34",
    "context": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Roderick strong leads the Creed Brothers.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n1 (all x all y all z (Leads(x,y,True) & Member(z,y,True) -> Leads(x,z,True))).  [assumption].\n2 Leads(Roderick_Strong,Creed_Brothers,True).  [goal].\n3 -Leads(x,y,True) | -Member(z,y,True) | Leads(x,z,True).  [clausify(1)].\n4 Member(Creed_Brothers,Diamond_Mine,True).  [assumption].\n6 Leads(Roderick_Strong,Diamond_Mine,True).  [assumption].\n7 -Leads(Roderick_Strong,Creed_Brothers,True).  [deny(2)].\n8 -Leads(x,Diamond_Mine,True) | Leads(x,Creed_Brothers,True).  [resolve(3,b,4,a)].\n10 -Leads(Roderick_Strong,Diamond_Mine,True).  [resolve(8,b,7,a)].\n11 $F.  [resolve(10,a,6,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid character '∧' (U+2227) (<string>, line 12)"
      }
    }
  },
  {
    "id": "FOLIO_dev_35",
    "context": "Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "B",
        "reasoning": "prove negation of original conclusion:\n2 --(exists x (Feud(Imperium,x) & Includes(x,IvyNile) & ProfessionalWrestlingStable(x))).  [goal].\n5 -Feud(Imperium,x) | -Includes(x,IvyNile) | -ProfessionalWrestlingStable(x).  [deny(2)].\n7 Includes(DiamondMine,IvyNile).  [assumption].\n8 -Feud(Imperium,DiamondMine) | -ProfessionalWrestlingStable(DiamondMine).  [resolve(5,b,7,a)].\n9 Feud(Imperium,DiamondMine).  [assumption].\n10 -ProfessionalWrestlingStable(DiamondMine).  [resolve(8,a,9,a)].\n11 ProfessionalWrestlingStable(DiamondMine).  [assumption].\n13 $F.  [resolve(10,a,11,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_36",
    "context": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beethoven is a composer.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_37",
    "context": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Some orchestras premiered music pieces.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "Invalid query: Exists $x (Orchestra($x, True) && Exists $y (MusicPiece($y, True) && Premiered($x, $y, True)))"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid character '∀' (U+2200) (<string>, line 17)"
      }
    }
  },
  {
    "id": "FOLIO_dev_38",
    "context": "Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Beethoven is not a conductor.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_39",
    "context": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A design by Max is a mass product design.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_40",
    "context": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A design by Max is evocative and dreamy.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_41",
    "context": "All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style. All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? A design by Max is either evocative or dreamy.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n6 (all x ((Timeless(x) & DesignByMax(x) -> MassProductDesign(x)) & Evocative(x))).  [assumption].\n7 (all x (DesignByMax(x) -> Evocative(x) | Dreamy(x))).  [goal].\n15 -Evocative(c1).  [deny(7)].\n16 Evocative(x).  [clausify(6)].\n22 $F.  [resolve(15,a,16,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_42",
    "context": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Coco Gauff is among the most active players in major tennis.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'NoneType' object is not subscriptable"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_43",
    "context": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Coco Gauff has lost to Rafael Nadal.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_44",
    "context": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga Świątek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Coco Gauff is not a player who lost to Iga Świątek or one of the most active players in major tennis.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (facts.LostToIga(Coco Gauff, $label), line 1)"
      },
      "FOL": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid character '→' (U+2192) (<string>, line 9)"
      }
    }
  },
  {
    "id": "FOLIO_dev_45",
    "context": "All cats are mammals. Some pets are not mammals.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? No pets are cats.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "Invalid query: No pets are cats: Pet($x, True) && Cat($x, True) >>> False"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Cat(x) -> Mammal(x))) # label(non_clause). [assumption].\n2 (exists x (Pet(x) & -Mammal(x))) # label(non_clause). [assumption].\n3 -(exists x (Pet(x) & Cat(x))) # label(non_clause) # label(goal). [goal].\n4 -Cat(x) | Mammal(x). [clausify(1)].\n5 Pet(c1). [clausify(2)].\n6 -Mammal(c1). [clausify(2)].\n7 Pet(c2). [deny(3)].\n8 Cat(c2). [deny(3)].\n9 Derived: Mammal(c2). [resolve(8,a,4,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Cat(x) -> Mammal(x))) # label(non_clause). [assumption].\n2 (exists x (Pet(x) & -Mammal(x))) # label(non_clause). [assumption].\n3 --(exists x (Pet(x) & Cat(x))) # label(non_clause) # label(goal). [goal].\n4 -Cat(x) | Mammal(x). [clausify(1)].\n5 Pet(c1). [clausify(2)].\n6 -Mammal(c1). [clausify(2)].\n7 -Pet(x) | -Cat(x). [deny(3)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_46",
    "context": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James's favorite season is summer.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_47",
    "context": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? James's favorite season is fall.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_48",
    "context": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's. James wants to have a long vacation.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Mia's favorite season is spring.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": null,
        "reasoning": "=== CSP Solving Trace ===\n\nTRY: favorite_emma = 2\nFAIL: favorite_emma = 2 (violates: AllDifferentConstraint([favorite_emma, favorite_mia, favorite_james]))\n  BACKTRACK: favorite_emma (no more values to try)",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_49",
    "context": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? 1984 is printed text.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (DigitalMedia(x) -> -Analog(x))) # label(non_clause). [assumption].\n2 (all x (PrintedText(x) -> Analog(x))) # label(non_clause). [assumption].\n3 (all x (StreamingService(x) -> DigitalMedia(x))) # label(non_clause). [assumption].\n4 (all x (HardcoverBook(x) -> PrintedText(x))) # label(non_clause). [assumption].\n5 StreamingService(1984) -> HardcoverBook(1984) # label(non_clause). [assumption].\n6 PrintedText(1984) # label(non_clause) # label(goal). [goal].\n7 -DigitalMedia(x) | -Analog(x). [clausify(1)].\n8 -PrintedText(x) | Analog(x). [clausify(2)].\n9 -StreamingService(x) | DigitalMedia(x). [clausify(3)].\n10 -HardcoverBook(x) | PrintedText(x). [clausify(4)].\n11 -StreamingService(1984) | HardcoverBook(1984). [clausify(5)].\n12 -PrintedText(1984). [deny(6)].\n13 Derived: -StreamingService(x) | -Analog(x). [resolve(9,b,7,a)].\n14 Derived: -HardcoverBook(x) | Analog(x). [resolve(10,b,8,a)].\n15 Derived: -HardcoverBook(1984). [resolve(12,a,10,b)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (DigitalMedia(x) -> -Analog(x))) # label(non_clause). [assumption].\n2 (all x (PrintedText(x) -> Analog(x))) # label(non_clause). [assumption].\n3 (all x (StreamingService(x) -> DigitalMedia(x))) # label(non_clause). [assumption].\n4 (all x (HardcoverBook(x) -> PrintedText(x))) # label(non_clause). [assumption].\n5 StreamingService(1984) -> HardcoverBook(1984) # label(non_clause). [assumption].\n6 -PrintedText(1984) # label(non_clause) # label(goal). [goal].\n7 -DigitalMedia(x) | -Analog(x). [clausify(1)].\n8 -PrintedText(x) | Analog(x). [clausify(2)].\n9 -StreamingService(x) | DigitalMedia(x). [clausify(3)].\n10 -HardcoverBook(x) | PrintedText(x). [clausify(4)].\n11 -StreamingService(1984) | HardcoverBook(1984). [clausify(5)].\n12 PrintedText(1984). [deny(6)].\n13 Derived: -StreamingService(x) | -Analog(x). [resolve(9,b,7,a)].\n14 Derived: -HardcoverBook(x) | Analog(x). [resolve(10,b,8,a)].\n15 Derived: Analog(1984). [resolve(12,a,8,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_50",
    "context": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? 1984 is a streaming service.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_51",
    "context": "No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? 1984 is not a streaming service.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n1 (all x (DigitalMedia(x) -> -Analog(x))).  [assumption].\n2 (all x (PrintedText(x) -> Analog(x))).  [assumption].\n3 (all x (StreamingService(x) -> DigitalMedia(x))).  [assumption].\n4 (all x (HardcoverBook(x) -> PrintedText(x))).  [assumption].\n5 StreamingService(1984) -> HardcoverBook(1984).  [assumption].\n6 -StreamingService(1984).  [goal].\n7 -StreamingService(x) | DigitalMedia(x).  [clausify(3)].\n8 -DigitalMedia(x) | -Analog(x).  [clausify(1)].\n9 -HardcoverBook(x) | PrintedText(x).  [clausify(4)].\n10 -PrintedText(x) | Analog(x).  [clausify(2)].\n11 StreamingService(1984).  [deny(6)].\n12 -StreamingService(1984) | HardcoverBook(1984).  [clausify(5)].\n13 -StreamingService(x) | -Analog(x).  [resolve(7,b,8,a)].\n14 HardcoverBook(1984).  [resolve(11,a,12,a)].\n15 -HardcoverBook(x) | Analog(x).  [resolve(9,b,10,a)].\n16 Analog(1984).  [resolve(14,a,15,a)].\n17 -Analog(1984).  [resolve(13,a,11,a)].\n18 $F.  [resolve(16,a,17,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_52",
    "context": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Basque is a Romance language.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_53",
    "context": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? German is a Romance language.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_54",
    "context": "All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? French is an Indo-European language.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "FOL": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_55",
    "context": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Robert Lewandowski is a soccer player.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n1 (all x (Striker(x) -> SoccerPlayer(x))).  [assumption].\n3 SoccerPlayer(Robert_Lewandowski).  [goal].\n4 -Striker(x) | SoccerPlayer(x).  [clausify(1)].\n5 Striker(Robert_Lewandowski).  [assumption].\n8 SoccerPlayer(Robert_Lewandowski).  [resolve(4,a,5,a)].\n9 -SoccerPlayer(Robert_Lewandowski).  [deny(3)].\n10 $F.  [resolve(8,a,9,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid character '→' (U+2192) (<string>, line 9)"
      }
    }
  },
  {
    "id": "FOLIO_dev_56",
    "context": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Robert Lewandowski plays for Bayern Munchen.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": null,
        "reasoning": "=== CSP Solving Trace ===\n\nTRY: convertible = 3\nFAIL: convertible = 3 (violates: minivan > convertible)\n  TRY: convertible = 2\n  TRY: minivan = 3\n    TRY: station_wagon = 1\n      SUCCESS: {'convertible': 2, 'minivan': 3, 'station_wagon': 1}\n      BACKTRACK: station_wagon (no more values to try)\n  TRY: convertible = 1\nFAIL: convertible = 1 (violates: AllDifferentConstraint([station_wagon, convertible, minivan]))\n  BACKTRACK: convertible (no more values to try)",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_57",
    "context": "Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Robert Lewandowski is a star.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (facts.Star(Robert Lewandowski, $label), line 1)"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Striker(x) -> SoccerPlayer(x))) # label(non_clause). [assumption].\n2 (all x all y (LeftTeam(x,y) -> -PlaysFor(x,y))) # label(non_clause). [assumption].\n3 Star(RobertLewandowski) # label(non_clause) # label(goal). [goal].\n4 Striker(RobertLewandowski). [assumption].\n5 LeftTeam(RobertLewandowski,BayernMunchen). [assumption].\n6 -Striker(x) | SoccerPlayer(x). [clausify(1)].\n7 -LeftTeam(x,y) | -PlaysFor(x,y). [clausify(2)].\n8 -Star(RobertLewandowski). [deny(3)].\n9 Derived: SoccerPlayer(RobertLewandowski). [resolve(6,a,4,a)].\n10 Derived: -PlaysFor(RobertLewandowski,BayernMunchen). [resolve(7,a,5,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Striker(x) -> SoccerPlayer(x))) # label(non_clause). [assumption].\n2 (all x all y (LeftTeam(x,y) -> -PlaysFor(x,y))) # label(non_clause). [assumption].\n3 -Star(RobertLewandowski) # label(non_clause) # label(goal). [goal].\n4 Striker(RobertLewandowski). [assumption].\n5 LeftTeam(RobertLewandowski,BayernMunchen). [assumption].\n6 -Striker(x) | SoccerPlayer(x). [clausify(1)].\n7 -LeftTeam(x,y) | -PlaysFor(x,y). [clausify(2)].\n8 Star(RobertLewandowski). [deny(3)].\n9 Derived: SoccerPlayer(RobertLewandowski). [resolve(6,a,4,a)].\n10 Derived: -PlaysFor(RobertLewandowski,BayernMunchen). [resolve(7,a,5,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_58",
    "context": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Butte and Pierre are in the same state.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "B",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "name 'Montana' is not defined"
      }
    }
  },
  {
    "id": "FOLIO_dev_59",
    "context": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Pierre and Bismarck are in the same state.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (InState(x,Montana) -> -SameState(x,Pierre))) # label(non_clause). [assumption].\n2 SameState(Pierre,Bismarck) # label(non_clause) # label(goal). [goal].\n3 City(Billings). [assumption].\n4 City(Butte). [assumption].\n5 City(Helena). [assumption].\n6 City(Missoula). [assumption].\n7 City(WhiteSulphurSprings). [assumption].\n8 City(Pierre). [assumption].\n9 City(Bismarck). [assumption].\n10 State(Montana). [assumption].\n11 InState(Billings,Montana). [assumption].\n12 InState(Butte,Montana). [assumption].\n13 InState(Helena,Montana). [assumption].\n14 InState(Missoula,Montana). [assumption].\n15 InState(WhiteSulphurSprings,Montana). [assumption].\n16 -InState(Pierre,Montana). [assumption].\n17 -InState(x,Montana) | -SameState(x,Pierre). [clausify(1)].\n18 -SameState(Pierre,Bismarck). [deny(2)].\n19 Derived: -SameState(Billings,Pierre). [resolve(17,a,11,a)].\n20 Derived: -SameState(Butte,Pierre). [resolve(17,a,12,a)].\n21 Derived: -SameState(Helena,Pierre). [resolve(17,a,13,a)].\n22 Derived: -SameState(Missoula,Pierre). [resolve(17,a,14,a)].\n23 Derived: -SameState(WhiteSulphurSprings,Pierre). [resolve(17,a,15,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (InState(x,Montana) -> -SameState(x,Pierre))) # label(non_clause). [assumption].\n2 -SameState(Pierre,Bismarck) # label(non_clause) # label(goal). [goal].\n3 City(Billings). [assumption].\n4 City(Butte). [assumption].\n5 City(Helena). [assumption].\n6 City(Missoula). [assumption].\n7 City(WhiteSulphurSprings). [assumption].\n8 City(Pierre). [assumption].\n9 City(Bismarck). [assumption].\n10 State(Montana). [assumption].\n11 InState(Billings,Montana). [assumption].\n12 InState(Butte,Montana). [assumption].\n13 InState(Helena,Montana). [assumption].\n14 InState(Missoula,Montana). [assumption].\n15 InState(WhiteSulphurSprings,Montana). [assumption].\n16 -InState(Pierre,Montana). [assumption].\n17 -InState(x,Montana) | -SameState(x,Pierre). [clausify(1)].\n18 SameState(Pierre,Bismarck). [deny(2)].\n19 Derived: -SameState(Billings,Pierre). [resolve(17,a,11,a)].\n20 Derived: -SameState(Butte,Pierre). [resolve(17,a,12,a)].\n21 Derived: -SameState(Helena,Pierre). [resolve(17,a,13,a)].\n22 Derived: -SameState(Missoula,Pierre). [resolve(17,a,14,a)].\n23 Derived: -SameState(WhiteSulphurSprings,Pierre). [resolve(17,a,15,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  },
  {
    "id": "FOLIO_dev_60",
    "context": "Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
    "question": "Based on the above information, is the following statement true, false, or uncertain? Montana is home to the city of Missoula.",
    "options": [
      "A) True",
      "B) False",
      "C) Uncertain"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'FOLIO'"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n4 LocatedIn(Missoula,Montana).  [goal].\n12 LocatedIn(Missoula,Montana).  [assumption].\n15 -LocatedIn(Missoula,Montana).  [deny(4)].\n16 $F.  [resolve(15,a,12,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "CSP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "parsing error",
        "error_message": ""
      }
    }
  }
]